------------------------------------------------1
USE [codx_hr]
GO
/****** Object:  StoredProcedure [dbo].[HR_spCalcAlloGradeFormulaLawSal]    Script Date: 1/21/2025 5:29:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER procedure [dbo].[HR_spCalcAlloGradeFormulaLawSal]
(
	@EmployeeID NVARCHAR(20) = 5141,
	@E_CurrencyCode varchar(3) = 'VND',
	@DowCode VARCHAR(7) = 2,
	@BUCode NVARCHAR(20),
	@App_BaseAmtDec int = 0,
	@App_ForgCurrAmtDec int = 0,	
	@E_RateToVND money = 1,
	@GroupSalCode VARCHAR(20) = 4,
	@DowNum float = 24,
	@InsSalary money = 0, 
	@ProductSal money = 0,
	@AlloGradeCode VARCHAR(20),
	@AlloAmount float output
)
AS

	DECLARE @TotalAllF money, @Amount MONEY, @AmountTT MONEY 
	DECLARE @UICurrencyCode varchar(3), @SI_MaxSalary money, @SI_MinSalary money
	DECLARE @FixAmount money, @SalaryRate float
	DECLARE @FromTime datetime, @ToTime datetime, @IsMonthAmount bit, @CurDate datetime, @Amount2 money, @AmountTemp money
	DECLARE @UnitOutput money, @soluot int, @AmountNoTax money
	DECLARE @mEmpID NVARCHAR(20), @BeginDate datetime, @EndDate datetime, @DepartmentCode NVARCHAR(20), @JobWCode VARCHAR(20)
	DECLARE @tempTime datetime, @t1 datetime, @t2 datetime, @IsInPayroll bit
	DECLARE @Allo_EffectDate datetime
	DECLARE @E_RateToVNDAllo FLOAT, @PRIsMinSalByInsList BIT, @PRCurrencyForCal nvarchar(3), @PRCurrencyForPay nvarchar(3)
    

	set @E_RateToVNDAllo = 1
	set @soluot = 0
	SET @TotalAllF = 0
	SET @SI_MaxSalary = 0
	SET @SI_MinSalary = 0
	SET @Amount = 0
	SET @AmountTT = 0
	SET @AmountNoTax =0

	-- Lay ve dau ki luong, cuoi ki luong
	SELECT TOP(1) @FromTime = FromDate, @ToTime = ToDate FROM HR_ConfigTSEmpStandardWD WITH (NOLOCK) WHERE EmployeeID = @EmployeeID AND DowCode = @DowCode

	-- Lay ve muc dong bhxh toi da, toi thieu theo ky tinh luong.	
	SELECT TOP(1) @SI_MaxSalary = SI_MaxSalary, @SI_MinSalary = SI_MinSalary FROM HR_fnGetRateDeductions(@DowCode + '/01') 
	WHERE (BUCode IS NULL OR (BUCode IS NOT NULL AND BUCode = @BUCode))

	SELECT TOP(1) @PRCurrencyForCal = PRCurrencyForCal, @PRCurrencyForPay = PRCurrencyForPay, @PRIsMinSalByInsList = case when PRIsSalGradeSISal = 1 and PRIsMinSalByInsList = 1 then 1 else 0 end
	FROM HR_ConfigPR WITH (NOLOCK)
	WHERE (BUCode IS NULL OR (BUCode IS NOT NULL AND BUCode = @BUCode))

	select ce.* into #Insurance from (
		select SI.EmployeeID, SIRateE as SIRateE, SIRateC as SIRateC, HIRateC as HIRateC, 
			HIRateE as HIRateE, UIRateC as UIRateC, UIRateE as UIRateE,
			@SI_MinSalary as MinimumSalary, @SI_MaxSalary as MaximumSalary
		from HR_SocialIns as SI  WITH (NOLOCK)
		where SI.DowCode = @DowCode and SI.EmployeeID = @EmployeeID
	) as ce
		
	-- Tao bang tam lay ve danh sach cac biet le cua 1 nhan vien theo tháng
	select CE.ExceptCode, Sum(CE.AmountF) as AmountF into #ATExcept from HR_PayTExcept CE WITH (NOLOCK) where DowCode = @DowCode and EmployeeID = @EmployeeID Group By ExceptCode
		
	-- Tao bang tam lay ve danh sach cac phu cap cua 1 nhan vien theo tháng
	select ALLO.AlloGradeCode, Sum(ALLO.AmountF) as AmountF into #AALLO from HR_PayAllowance ALLO WITH (NOLOCK) where DowCode = @DowCode and EmployeeID = @EmployeeID Group By AlloGradeCode
		
	-- Tra ve so phut di tre, ve som, so lan di tre, ve som theo tháng
	SELECT EarLateWorks.* into #EarLateWorks from (
		select EmployeeID, SUM(TimeInLate) as SoPhut_VaoTre, SUM(TimeOutEarly) as SoPhut_VeSom, 
			SUM(case when TimeInLate > 0 then 1 else 0 end) as SoLan_VaoTre, 
			SUM(case when TimeOutEarly > 0 then 1 else 0 end) as SoLan_VeSom
		from HR_TSKowLateEarly WITH (NOLOCK) where DowCode = @DowCode And EmployeeID = @EmployeeID 
		group by EmployeeID
	) as EarLateWorks

	-- Lay quyet dinh phu cap hien tai		
	SELECT EALLO.* into #AEALLO from 
	(
		SELECT EAllo.EmployeeID, EAllo.AlloGradeCode, EAllo.FixAmount, EAllo.SalaryRate,
			EAllo.EffectDate, case when EndDate is null then @ToTime else EndDate end as EndDate
		FROM HR_EmpAllowance as EAllo WITH (NOLOCK) 
		inner join HR_LSAlloGrade AS AG WITH (NOLOCK) ON EAllo.AlloGradeCode = AG.AlloGradeCode
		WHERE EAllo.EmployeeID = @EmployeeID and (AG.IsFixAmount = 1) AND (EffectDate <= @ToTime 
			AND (EAllo.EndDate = '' OR EAllo.EndDate IS NULL OR EAllo.EndDate > @FromTime)) 
			
		UNION ALL
		SELECT EAllo.EmployeeID, EAllo.AlloGradeCode, 
			dbo.HR_fnGetSalaryByLevel(EAllo.EmployeeID, @ToTime, 
				CASE WHEN AG.SalaryType = 2 AND @PRIsMinSalByInsList = 1 THEN -2
					WHEN AG.SalaryType = 4 AND @PRIsMinSalByInsList = 1 THEN -4
					ELSE AG.SalaryType end) * EAllo.SalaryRate / 100 AS FixAmount,
			EAllo.SalaryRate, EAllo.EffectDate, case when EndDate is null then @ToTime else EndDate end as EndDate
		FROM HR_EmpAllowance as EAllo WITH (NOLOCK) inner join HR_LSAlloGrade AS AG WITH (NOLOCK) ON EAllo.AlloGradeCode = AG.AlloGradeCode
		WHERE  EAllo.EmployeeID = @EmployeeID AND (AG.IsFixAmount = 0) AND (EffectDate <= @ToTime and (EAllo.EndDate = '' OR EAllo.EndDate IS NULL OR EAllo.EndDate > @FromTime))
	) as EALLO
		
	-- Lay danh sach nhan vien cho phép điều động, bổ sung, thuyên chuyển
	SELECT EWork.* into #EWork from (			
		select EmployeeID, 
			case when BeginDate < @FromTime then @FromTime else BeginDate end as FromTime,
			case when EndDate IS null then @ToTime when EndDate > @ToTime then @ToTime else EndDate end as ToTime, 
			OrgUnitID, PositionID 
		from (
			SELECT EmployeeID, BeginDate, EndDate, OrgUnitID, PositionID,
				ROW_NUMBER() OVER (PARTITION BY EmployeeID ORDER BY EmployeeID, [BeginDate] desc) AS Row
			FROM HR_EmpWorking WITH (NOLOCK) where EmployeeID = @EmployeeID
		) as R where Row = 1
	) as EWork
		
	--select CE.* into #EPerApps from (
	--	SELECT HCSEM_EmpAppraisal.EmployeeID, RankM01 AS M01, RankM02 AS M02, RankM03 AS M03, RankM04 AS M04, RankM05 AS M05, 
	--		RankM06 AS M06, RankM07 AS M07, RankM08 AS M08, RankM09 AS M09, RankM10 AS M10, RankM11 AS M11, RankM12 AS M12, 
	--		RankQ01 AS Q01, RankQ02 AS Q02, RankQ03 AS Q03, RankQ04 AS Q04, RankH01 AS H01, RankH02 AS H02, RankYear AS AppYear
	--	FROM HCSEM_EmpAppraisal WITH (NOLOCK)
	--	Where EmployeeID = @EmployeeID
	--) as CE
					
	-- Lay ve cac yeu to
	select ce.*
	into #ASFactors from (
		SELECT BsSalary.EmployeeID, isnull(BsSalary.RealSalary,0) as LuongCoBan, isnull(BsSalary.MinSalary,0) as LuongCoBan_ToiThieu, 
			isnull(BsSalary.CoeffSalary,0) as HeSo_LuongCoBan, isnull(BsSalary.PieceWage,0) as LuongKhoan, 
			isnull(JwSalary.RealSalary,0) as LuongChucDanh, isnull(JwSalary.MinSalary,0) as LuongChucDanh_ToiThieu, isnull(UnitOT, 0) as DonGia_LuongNgoaiGio,
			PRTUnionAmount AS CongDoanPhi, PRSIStandardWD AS NgayCongChuan_BHXH, TSMaxOTHourPerY AS SoGioNgoaiGio_QD1Nam, 
			TSStandardWDOfOT AS NgayCongChuan_TinhNgoaiGio, PRPITFamilyTaxFreeOwn AS TruGiaCanh_BanThan, PRPITFamilyTaxFreeUnit AS TruGiaCanh_1PhuThuoc, 
			ConTypeCode_REF AS LoaiHDLD, CV.EmpTypeCode_REF AS LoaiNhanVien, CV.DepartmentCode_REF AS BoPhanLamViec, cv.JobWCode_REF AS ChucDanhCV,
		--	M01, M02, M03, M04, M05, M06, M07, M08, M09, M10, M11, M12, Q01, Q02, Q03, Q04, H01, H02, AppYear,
			EDow_Num AS NgayCongChuan, IsServiceFee AS CoPhiDichVu,
			JoinedOn AS NgayVaoLam, EndDate AS NgayThoiViec, CareerDate AS NgayVaoNganh, PersonnelDate AS NgayVaoBienChe, 
			HiredOn AS NgayThanhNVChinhThuc, IsTUnion AS LaCongDoanVien, CV.TUnionDate AS NgayVaoCongDoan, 
			IsHI AS CoThamGiaBHYT, IsSI AS CoThamGiaBHXH, IsUI AS CoThamGiaBHTN,
			AdvanceSal AS MucLuongTamUng, [HCSEM.GioiTinh_Val] AS GioiTinh, TUnionFee AS MucDongCongDoanPhi, AssignRegionCode_REF AS VungLamViec, 
			CAP3 AS BoPhanCap3, CAP2 AS BoPhanCap2
		FROM(
			select EmployeeID, ConTypeCode_REF, EmpTypeCode_REF, DepartmentCode_REF, JobWCode_REF, IsServiceFee,
				JoinedOn, case when StoppedOn is not null then DATEADD(day, -1, StoppedOn) else StoppedOn end as EndDate, CareerDate, PersonnelDate, HiredOn,
				IsHI, IsSI, IsUI, AdvanceSal, [HCSEM.GioiTinh_Val], AssignRegionCode_REF,
				CAP3, CAP2, TUnionDate, IsTUnion, TUnionFee
			from HR_VWEmpCurriculumViateCV 
			left join HR_VMDepartmentFullLevel ON HR_VMDepartmentFullLevel.OrgUnitID = HR_VWEmpCurriculumViateCV.OrgUnitID
			where EmployeeID = @EmployeeID 
			
		)as CV left outer JOIN (
			select EmployeeID, RealSalary, MinSalary, CoeffSalary, PieceWage, UnitOT
			from HR_EmpBasicSalary where IsCurrent = 1 and EmployeeID = @EmployeeID
		) as BsSalary on CV.EmployeeID = BsSalary.EmployeeID
		LEFT OUTER JOIN (
			SELECT EmployeeID, RealSalary, MinSalary
			from HR_EmpJWSalary where IsCurrent = 1 and EmployeeID = @EmployeeID
		) as JwSalary
		ON BsSalary.EmployeeID = JwSalary.EmployeeID
		LEFT OUTER JOIN (
			select @EmployeeID as EmployeeID, PRTUnionAmount, PRSIStandardWD, PRPITFamilyTaxFreeOwn, PRPITFamilyTaxFreeUnit
			from HR_ConfigPR WITH (NOLOCK)
			WHERE (BUCode IS NULL OR (BUCode IS NOT NULL AND BUCode = @BUCode))
		) as SC ON CV.EmployeeID = SC.EmployeeID LEFT OUTER JOIN (
			SELECT @EmployeeID AS EmployeeID, TSMaxOTHourPerY, TSStandardWDOfOT
			FROM HR_ConfigTS WITH (NOLOCK)
			WHERE (BUCode IS NULL OR (BUCode IS NOT NULL AND BUCode = @BUCode))
		) AS TS ON CV.EmployeeID = TS.EmployeeID
	--	left outer join #EPerApps as EPA on CV.EmployeeID = EPA.EmployeeID
		LEFT OUTER JOIN
		(
			SELECT EmployeeID, StandardWD AS EDow_Num FROM HR_ConfigTSEmpStandardWD WITH (NOLOCK) WHERE EmployeeID = @EmployeeID AND DowCode = @DowCode
		) as PRD on CV.EmployeeID = PRD.EmployeeID
		--LEFT OUTER JOIN (
		--	select EmployeeID, IsTUnion, TUnionDate, TUnionFee from HCSEM_EmpInfoUnion WITH (NOLOCK) where EmployeeID = @EmployeeID
		--) as EParty on CV.EmployeeID = EParty.EmployeeID
	) as CE
	
	-- Lấy tổng quỹ tiền lương group by theo GroupSalCode
	select ce.* into #HCSPR_FundSalaryUnit from (
		select GroupSalCode, Sum(TotalFund) as SalaryUnit from HR_PRFundSalaryUnit with (nolock) where DowCode = @DowCode AND 1 = 0 group by GroupSalCode
	) as ce

	-- Lay ve don gia Tổng quỹ tiền lương
	SET @UnitOutput = 0
	Exec HR_spGetSalaryUnit @DowCode, @EmployeeID, @Fromtime, @ToTime, @GroupSalCode, @UnitOutput output
	
	select ce.* into #tmp_tbl_kow_f_1_row from (
		select 0 as ESalaryUnit
	) as ce

	-- Lay ve he so luong-thuong 
    select AFDE.* into #AFDE from ( 
        select R.CoeffCode, Sum( 
				case when IsSplit = 0 then Coefficient 
						when IsSplit = 1 and Row_ID = 1 then Coefficient else 0 end) as Coefficient   
		from (
			select FDE.CoeffCode, FDE.Coefficient, SC.IsSplit, ROW_NUMBER() OVER(PARTITION BY FDE.EmployeeID, FDE.CoeffCode ORDER BY FDE.EmployeeID, FromTime desc) as Row_ID
			FROM HR_PRSalCoeffEmp as FDE WITH (NOLOCK) left outer join HR_LSSalCoeff as SC WITH (NOLOCK) on FDE.CoeffCode = SC.CoeffCode 
			Where EmployeeID = @EmployeeID and FromTime<=@ToTime and @FromTime<=ToTime 
		) as R
		Group By R.CoeffCode 
    ) as AFDE

	-- Lay ve danh sach phu cap cua nhan vien tinh cho 1 thang, hu?ng 1 lan trong thang
	DECLARE EAllowance_Cursor CURSOR FOR
		select EmployeeID, Allo.AlloGradeCode, Allo.CurrencyCode, IsMonthAmount, AmountNoTax, AG.IsInPayroll
		from HR_EmpAllowance as Allo WITH (NOLOCK) inner join HR_LSAlloGrade as AG WITH (NOLOCK) on Allo.AlloGradeCode = AG.AlloGradeCode
		where IsUserFormula = 1 and (EffectDate <= @ToTime and (EndDate = '' OR EndDate IS NULL OR EndDate > @FromTime)) 
			AND EmployeeID = @EmployeeID and IsManual <> 1
			AND IsLawSalary = 1 and Allo.AlloGradeCode = @AlloGradeCode
		ORDER BY AG.SalaryInclude
	OPEN EAllowance_Cursor
	WHILE 1 = 1
	BEGIN
		FETCH NEXT FROM EAllowance_Cursor INTO @EmployeeID, @AlloGradeCode, @UICurrencyCode, @IsMonthAmount,@AmountNoTax, @IsInPayroll
		IF @@FETCH_STATUS != 0
			BREAK;

		IF @UICurrencyCode ='' OR @UICurrencyCode IS NULL OR LEN(@UICurrencyCode)= 0	-- Neu trong DM PC ko chon nguyen te tinh PC thi gan nguyen te tinh PC = nguyen te tinh luong cua NV
			SET @UICurrencyCode = @E_CurrencyCode
	
		IF @UICurrencyCode <> @E_CurrencyCode	-- Neu nguyen te PC <> nguyen te tinh luong cua NV thi tim ty gia cua nguyen te PC
			SELECT TOP(1) @E_RateToVNDAllo = RateToVND FROM HR_fnGetPayExchangeRate(@BUCode, @DowCode, @UICurrencyCode)
		ELSE 
			SET @E_RateToVNDAllo = @E_RateToVND

		SET @E_RateToVNDAllo = ISNULL(@E_RateToVNDAllo, 1)		
		SET @AmountTemp = 0
		SET @FixAmount = 0
		SET @SalaryRate = 0
		SET @EndDate = @ToTime

		select @FixAmount = FixAmount, @SalaryRate = SalaryRate, @EndDate = EndDate, @Allo_EffectDate = case when EffectDate > @FromTime then EffectDate else @FromTime end
		from #AEALLO Where AlloGradeCode = @AlloGradeCode
		SET @EndDate = case when @EndDate IS null then @ToTime else @EndDate end
		-- Lay mốc thời gian tạm (from_time)
		--SET @tempTime = DATEADD(DAY,-1,@FromTime)
		SET @tempTime = DATEADD(DAY,-1, @Allo_EffectDate)
		
		if @IsMonthAmount = 1
		begin			
			IF not exists (select TOP(1) 1 from #EWork) -- Trong thang nhân viên khong co quyet dinh thuyên chuyển nào
			BEGIN
				
				exec HR_spBuildFormula4KowOrAllo @EmployeeID, @DowCode, @AlloGradeCode, @SI_MinSalary, @SI_MaxSalary, 
				'HR_LSAlloGrade', 0, 0, 0, 0, 
				0, 0, 0, 0, 0, 
				@GroupSalCode, @FixAmount, @SalaryRate, @Allo_EffectDate, @EndDate, 
				@DowNum, @E_RateToVNDAllo, @InsSalary, @ProductSal,@UnitOutput,
				-1, -1, @AmountTemp output

				SET @AmountTemp = case when @AmountTemp is null then 0 else @AmountTemp end
			end
			ELSE
			begin
				if not exists ( 
					SELECT top(1) 1 from HR_SysFormula 
					where ListType = 'HR_LSAlloGrade' and ListCode = @AlloGradeCode and GroupSalCode = @GroupSalCode
						and (Atom = 'DepartmentCode_REF' Or Atom = 'JobWCode_REF'))
				begin
					-- Phan ra cong thuc, tinh tung phu cap 1				
					exec HR_spBuildFormula4KowOrAllo @EmployeeID, @DowCode, @AlloGradeCode, @SI_MinSalary, @SI_MaxSalary, 
					'HR_LSAlloGrade', 0, 0, 0, 0, 
					0, 0, 0, 0, 0, 
					@GroupSalCode, @FixAmount, @SalaryRate, @Allo_EffectDate, @EndDate, 
					@DowNum, @E_RateToVND, @InsSalary, @ProductSal,@UnitOutput,
					-1, -1, @AmountTemp OUTPUT
                    
					SET @AmountTemp = case when @AmountTemp is null then 0 else @AmountTemp end
				end
				else
				begin
					SET @AmountTemp = 0
					SET @Amount2 = 0
					DECLARE Cursor_1 CURSOR FOR
						select EmployeeID, FromTime, ToTime, OrgUnitID, PositionID from #EWork
						Order By FromTime 
					OPEN Cursor_1
					WHILE 1 = 1
					BEGIN
						FETCH NEXT FROM Cursor_1 INTO @mEmpID, @BeginDate, @EndDate, @DepartmentCode, @JobWCode
						IF @@FETCH_STATUS != 0
							BREAK;
						IF DATEDIFF(day, @tempTime, @BeginDate) >= 2
						begin
							SET @t1 = DATEADD(DAY,1,@tempTime)
							SET @t2 = DATEADD(DAY,-1,@BeginDate)

							-- Phan ra cong thuc, tinh tung phu cap 1				
							exec HR_spBuildFormula4KowOrAllo @EmployeeID, @DowCode, @AlloGradeCode, @SI_MinSalary, @SI_MaxSalary, 
							'HR_LSAlloGrade', 0, 0, 0, 0, 
							0, 0, 0, 0, 0, 
							@GroupSalCode, @FixAmount, @SalaryRate, @t1, @t2, 
							@DowNum, @E_RateToVNDAllo, @InsSalary, @ProductSal,@UnitOutput,
							-1, -1, @Amount2 output
							
							SET @AmountTemp = (case when @Amount2 is null then 0 else @Amount2 end) + @AmountTemp
						end	
						SET @tempTime = @EndDate
						
						set @JobWCode = case when @JobWCode is null then -1 else @JobWCode end
						-- Phan ra cong thuc, tinh tung phu cap 1				
						exec HR_spBuildFormula4KowOrAllo @EmployeeID, @DowCode, @AlloGradeCode, @SI_MinSalary, @SI_MaxSalary, 
						'HR_LSAlloGrade', 0, 0, 0, 0, 
						0, 0, 0, 0, 0, 
						@GroupSalCode, @FixAmount, @SalaryRate, @BeginDate, @EndDate, 
						@DowNum, @E_RateToVNDAllo, @InsSalary, @ProductSal,@UnitOutput,
						-1, -1, @Amount2 OUTPUT
                        
						set @AmountTemp = (case when @Amount2 is null then 0 else @Amount2 end) + @AmountTemp
						
					END
					CLOSE Cursor_1  
					DEALLOCATE Cursor_1
				end
			end

		end
		else	
		begin
			--SET @CurDate = @FromTime
			SET @CurDate = @Allo_EffectDate
			While DATEDIFF(DAY, @CurDate, @ToTime) >= 0
			BEGIN	
				set @Amount2 = 0
				
				If exists(select TOP(1) 1 from #EWork where @CurDate between FromTime and ToTime) 
				begin
					Select top(1) @DepartmentCode = OrgUnitID, @JobWCode = PositionID from #EWork where @CurDate between FromTime and ToTime
					set @JobWCode = case when @JobWCode is null then -1 else @JobWCode end
					
					-- Xet tu ngay @fBeginDay , den ngay @ToTime cua ky tinh luong
					exec HR_spBuildFormula4KowOrAllo @EmployeeID, @DowCode, @AlloGradeCode, @SI_MinSalary, @SI_MaxSalary, 
						'HR_LSAlloGrade', 0, 0, 0, 0, 
						0, 0, 0, 0, 0, 
						@GroupSalCode, @FixAmount, @SalaryRate, @CurDate, @CurDate, 
						@DowNum, @E_RateToVNDAllo, @InsSalary, @ProductSal,@UnitOutput,
						@DepartmentCode, @JobWCode, @Amount2 output
				end
				Else
				begin 
					-- Xet tu ngay @fBeginDay , den ngay @ToTime cua ky tinh luong
					exec HR_spBuildFormula4KowOrAllo @EmployeeID, @DowCode, @AlloGradeCode, @SI_MinSalary, @SI_MaxSalary, 
						'HR_LSAlloGrade', 0, 0, 0, 0, 
						0, 0, 0, 0, 0, 
						@GroupSalCode, @FixAmount, @SalaryRate, @CurDate, @CurDate, 
						@DowNum, @E_RateToVNDAllo, @InsSalary, @ProductSal,@UnitOutput,
						-1, -1, @Amount2 output
				end
				
				--print 'PC ' + cast(@CurDate as varchar) + 'Tien tinh duoc ' + cast(case when @Amount2 is null then 0 else @Amount2 end as varchar)
				set @AmountTemp = (case when @Amount2 is null then 0 else @Amount2 end) + @AmountTemp
				if @Amount2>0 
				set @soluot=@soluot+1
				SET @CurDate = DATEADD(day, 1, @CurDate)
			END
		end
		
		IF @AmountTemp != 0
		BEGIN
			
			SET @Amount = @AmountTemp
			SET @AmountTT = 0

			if isnull(@UICurrencyCode, '') = ''
			begin
				if @PRCurrencyForPay = @E_CurrencyCode
				begin
					set @AmountTT = @Amount * @E_RateToVND
				end
				else
				begin
					set @AmountTT = @Amount / @E_RateToVND
				END
			end
			else
			begin
				-- Nếu N.Tệ phát sinh = N.Tệ thanh toán
				if @UICurrencyCode = @PRCurrencyForPay
				begin
					-- Nếu N.Tệ phát sinh = N.Tệ tính lương của nv
					if @PRCurrencyForPay = @E_CurrencyCode
					begin
						set @AmountTT = @Amount * @E_RateToVND
					end
					else -- Nguyên tệ tính lương nv khác N.Tệ phát sinh
					begin
						set @AmountTT = @Amount
						set @Amount = @Amount / @E_RateToVND
					end
				end
				else if @UICurrencyCode <> @PRCurrencyForPay -- N.Tệ phát sinh khác N.Tệ thanh toán
				begin
					if @PRCurrencyForPay = @E_CurrencyCode
					begin
						set @AmountTT = @Amount * @E_RateToVND
						set @Amount = @AmountTT 
					end
					else
					begin
						if @UICurrencyCode = @E_CurrencyCode
						begin
							set @AmountTT = @Amount * @E_RateToVND
						end
						else
						BEGIN
							
							set @AmountTT = @Amount * @E_RateToVNDAllo
							SET @Amount = (@AmountTT / @E_RateToVND)
						end
					end
				end
				else
					continue;
			END
			
			if (@AmountNoTax >0 and @AmountTemp * @E_RateToVNDAllo < @AmountNoTax)
			begin
				if (@AmountTemp * @E_RateToVNDAllo) < 0	
					SET @AmountNoTax= 0 
				else 
					SET @AmountNoTax = @AmountTemp * @E_RateToVNDAllo
			end
			
			-- cap nhật lại danh sach phu cap
			if not exists(select TOP(1)1 from #AALLO Where AlloGradeCode = @AlloGradeCode)
				Insert into #AALLO(AlloGradeCode, AmountF) values(@AlloGradeCode, Round(case when @UICurrencyCode = @E_CurrencyCode then @AmountTemp else @AmountTemp / @E_RateToVNDAllo end, @App_BaseAmtDec))
			ELSE
				Update #AALLO set AmountF = AmountF + @AmountTemp Where AlloGradeCode = @AlloGradeCode

			If @IsInPayroll = 1
				SET @TotalAllF = @TotalAllF + @AmountTemp				
		END
	END
	CLOSE EAllowance_Cursor  
	DEALLOCATE EAllowance_Cursor

	set @AlloAmount = @TotalAllF
	
	RETURN


-------------------------------------------------------------2
USE [codx_hr]
GO
/****** Object:  StoredProcedure [dbo].[HR_spCalcAlloGradeFormula]    Script Date: 1/21/2025 5:30:24 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[HR_spCalcAlloGradeFormula]
(
	@EmployeeID NVARCHAR(20) = '01993',
	@E_CurrencyCode varchar(3) = 'VND',
	@DowCode VARCHAR(7) = '2020/01',
	@MMYYYY varchar(7) = '2020/01',
	@BUCode NVARCHAR(20) = NULL,
	@App_BaseAmtDec int = 0,
	@App_ForgCurrAmtDec int = 0,	
	@E_RateToVND money = 1,
	@GroupSalCode VARCHAR(20) = '1',
	@Dow_Num float = 24,
	@InsSalary money = 0, 
	@ProductSal money = 0,
	@IsLawSalary bit = 0 -- Nếu @IsLawSalary = 1 --> PC này chạy trước khi tính công (PC thâm niên cộng vào lương), ngược lại, PC chạy sau khi tính công
)
AS

	DECLARE @AlloGradeCode VARCHAR(20), @TotalAllF money, @Amount MONEY, @AmountTT MONEY, @ID uniqueidentifier
	DECLARE @UICurrencyCode varchar(3), @SI_MaxSalary money, @SI_MinSalary money
	DECLARE @FixAmount money, @SalaryRate float
	DECLARE @FromTime datetime, @ToTime datetime, @IsMonthAmount bit, @CurDate datetime, @Amount2 money, @AmountTemp money
	DECLARE @UnitOutput money, @soluot int, @AmountNonTax money
	DECLARE @mEmpID NVARCHAR(20), @BeginDate datetime, @EndDate datetime, @DepartmentCode NVARCHAR(20), @JobWCode VARCHAR(20)
	DECLARE @tempTime datetime, @t1 datetime, @t2 datetime, @IsInPayroll bit
	DECLARE @Allo_EffectDate datetime
	DECLARE @E_RateToVNDAllo FLOAT, @PRIsMinSalByInsList BIT, @PRCurrencyForCal nvarchar(3), @PRCurrencyForPay nvarchar(3)

	set @E_RateToVNDAllo=1
	set @soluot = 0
	SET @TotalAllF = 0
	SET @SI_MaxSalary = 0
	SET @SI_MinSalary = 0
	SET @Amount = 0
	SET @AmountTT = 0
	SET @AmountNonTax =0
	set @IsLawSalary = isnull(@IsLawSalary, 0)

	-- Lay ve dong du lieu cuoi cung trong incomes
	select top(1) @ID  = RecID FROM HR_PayIncome WITH (NOLOCK) where EmployeeID = @EmployeeID and DowCode = @DowCode Order by FromTime Desc	
	--SELECT @ProductSal=isnull(SUM(Amount),0) FROM Hrm_pr_ProductAmount with (nolock) WHERE EmployeeID = @EmployeeID AND DowCode = @DowCode 
	SET @ProductSal = 0

	-- Lay ve dau ki luong, cuoi ki luong
	SELECT TOP(1) @FromTime = FromDate, @ToTime = ToDate FROM HR_ConfigTSEmpStandardWD WITH (NOLOCK) WHERE EmployeeID = @EmployeeID AND DowCode = @DowCode

	SELECT TOP(1) @PRCurrencyForCal = PRCurrencyForCal, @PRCurrencyForPay = PRCurrencyForPay, @PRIsMinSalByInsList = case when PRIsSalGradeSISal = 1 and PRIsMinSalByInsList = 1 then 1 else 0 end
	FROM HR_ConfigPR WITH (NOLOCK)
	WHERE (BUCode IS NULL OR (BUCode IS NOT NULL AND BUCode = @BUCode))

	-- hphoa modified: 2012/02/19: tao cac bang tam chua cac const dung trong công thuc tinh phu cap
	-- Tim xem trong thang hien tai, nhan vien co nhan dc phu cap nao hok
	IF exists (select top(1) 1 from HR_EmpAllowance as Allo WITH (NOLOCK) inner join HR_LSAlloGrade as AG WITH (NOLOCK) on Allo.AlloGradeCode = AG.AlloGradeCode
		WHERE IsUserFormula = 1 and IsCurrent = 1 And EmployeeID = @EmployeeID and IsLawSalary = 0) 
	BEGIN
		-- Lay ve muc dong bhxh toi da, toi thieu theo ky tinh luong.
		SELECT TOP(1) @SI_MaxSalary = SI_MaxSalary, @SI_MinSalary = SI_MinSalary FROM HR_fnGetRateDeductions(@DowCode + '/01') 
		WHERE (BUCode IS NULL OR (BUCode IS NOT NULL AND BUCode = @BUCode))

		select ce.* into #Insurance from (
			select SI.EmployeeID, SIRateE as SIRateE, SIRateC as SIRateC, HIRateC as HIRateC,  HIRateE as HIRateE, UIRateC as UIRateC, UIRateE as UIRateE,
				@SI_MinSalary as MinimumSalary, @SI_MaxSalary as MaximumSalary
			from HR_SocialIns as SI WITH (NOLOCK)
			where SI.DowCode = @DowCode and SI.EmployeeID = @EmployeeID
		) as ce

		-- Tao bang tam lay ve danh sach cac biet le cua 1 nhan vien theo tháng
		select CE.ExceptCode, Sum(CE.AmountF) as AmountF into #ATExcept FROM HR_PayTExcept CE WITH (NOLOCK) where DowCode = @DowCode and EmployeeID = @EmployeeID Group By ExceptCode

		-- Tao bang tam lay ve danh sach cac phu cap cua 1 nhan vien theo tháng
		select ALLO.AlloGradeCode, Sum(ALLO.AmountF) as AmountF into #AALLO FROM HR_PayAllowance ALLO WITH (NOLOCK) where DowCode = @DowCode and EmployeeID = @EmployeeID Group By AlloGradeCode

		-- Tra ve so phut di tre, ve som, so lan di tre, ve som theo tháng
		SELECT EarLateWorks.* into #EarLateWorks from (
			select EmployeeID, SUM(TimeInLate) as SoPhut_VaoTre, SUM(TimeOutEarly) as SoPhut_VeSom, 
				SUM(case when TimeInLate > 0 then 1 else 0 end) as SoLan_VaoTre, 
				SUM(case when TimeOutEarly > 0 then 1 else 0 end) as SoLan_VeSom
			from HR_TSKowLateEarly WITH (NOLOCK) where DowCode = @DowCode And EmployeeID = @EmployeeID 
			group by EmployeeID
		) as EarLateWorks

		-- Lay quyet dinh phu cap hien tai		
		SELECT EALLO.* into #AEALLO from 
		(
			SELECT EAllo.EmployeeID, EAllo.AlloGradeCode, EAllo.FixAmount, EAllo.SalaryRate,
				EAllo.EffectDate, case when EndDate is null then @ToTime else EndDate end as EndDate
			FROM HR_EmpAllowance as EAllo WITH (NOLOCK) inner join HR_LSAlloGrade AS AG WITH (NOLOCK) ON EAllo.AlloGradeCode = AG.AlloGradeCode
			WHERE EAllo.EmployeeID = @EmployeeID and (AG.IsFixAmount = 1) AND (EffectDate <= @ToTime 
				AND (EAllo.EndDate = '' OR EAllo.EndDate IS NULL OR EAllo.EndDate > @FromTime)) 

			UNION ALL
			SELECT EAllo.EmployeeID, EAllo.AlloGradeCode, 
				dbo.HR_fnGetSalaryByLevel(EAllo.EmployeeID, @ToTime, 
					CASE WHEN AG.SalaryType = 2 AND @PRIsMinSalByInsList = 1 THEN -2
						WHEN AG.SalaryType = 4 AND @PRIsMinSalByInsList = 1 THEN -4
						ELSE AG.SalaryType end) * EAllo.SalaryRate / 100 AS FixAmount,
				EAllo.SalaryRate, EAllo.EffectDate, case when EndDate is null then @ToTime else EndDate end as EndDate
			FROM HR_EmpAllowance as EAllo WITH (NOLOCK) inner join HR_LSAlloGrade AS AG WITH (NOLOCK) ON EAllo.AlloGradeCode = AG.AlloGradeCode
			WHERE  EAllo.EmployeeID = @EmployeeID AND (AG.IsFixAmount = 0) AND (EffectDate <= @ToTime and (EAllo.EndDate = '' OR EAllo.EndDate IS NULL OR EAllo.EndDate > @FromTime))
		) as EALLO

		-- Lay danh sach nhan vien cho phép điều động, bổ sung, thuyên chuyển
		SELECT EWork.* into #EWork from (			
			select EmployeeID, 
				case when BeginDate < @FromTime then @FromTime else BeginDate end as FromTime,
				case when EndDate IS null then @ToTime when EndDate > @ToTime then @ToTime else EndDate end as ToTime, 
				OrgUnitID, PositionID 
			from (
				SELECT EmployeeID, BeginDate, EndDate, OrgUnitID, PositionID,
					ROW_NUMBER() OVER (PARTITION BY EmployeeID ORDER BY EmployeeID, [BeginDate] desc) AS Row
				FROM HR_EmpWorking WITH (NOLOCK) where EmployeeID = @EmployeeID
			) as R where Row = 1
		) as EWork

		select ce.* into #EIncome from (
			SELECT EmployeeID, Sum(TotalKowSal) as TotalKowSal, Sum(TotalOTSal) as TotalOTSal
			from HR_PayIncome with (nolock) where EmployeeID = @EmployeeID and DowCode = @DowCode
			GROUP BY EmployeeID
		) as ce

		--select CE.* into #EPerApps from (
		--	SELECT HCSEM_EmpAppraisal.EmployeeID, RankM01 AS M01, RankM02 AS M02, RankM03 AS M03, RankM04 AS M04, RankM05 AS M05, 
		--		RankM06 AS M06, RankM07 AS M07, RankM08 AS M08, RankM09 AS M09, RankM10 AS M10, RankM11 AS M11, RankM12 AS M12, 
		--		RankQ01 AS Q01, RankQ02 AS Q02, RankQ03 AS Q03, RankQ04 AS Q04, RankH01 AS H01, RankH02 AS H02, RankYear AS AppYear
		--	FROM HCSEM_EmpAppraisal WITH (NOLOCK)
		--	Where EmployeeID = @EmployeeID
		--) as CE

		-- Lay ve cac yeu to
		select ce.*, I.TotalKowSal, I.TotalOTSal
		into #ASFactors from (
			SELECT cv.EmployeeID, isnull(BsSalary.RealSalary,0) as LuongCoBan, isnull(BsSalary.MinSalary,0) as LuongCoBan_ToiThieu, 
				isnull(BsSalary.CoeffSalary,0) as HeSo_LuongCoBan, isnull(BsSalary.PieceWage,0) as LuongKhoan, 
				isnull(JwSalary.RealSalary,0) as LuongChucDanh, isnull(JwSalary.MinSalary,0) as LuongChucDanh_ToiThieu, isnull(UnitOT, 0) as DonGia_LuongNgoaiGio,
				PRTUnionAmount AS CongDoanPhi, PRSIStandardWD AS NgayCongChuan_BHXH, TSMaxOTHourPerY AS SoGioNgoaiGio_QD1Nam, 
				TSStandardWDOfOT AS NgayCongChuan_TinhNgoaiGio, PRPITFamilyTaxFreeOwn AS TruGiaCanh_BanThan, PRPITFamilyTaxFreeUnit AS TruGiaCanh_1PhuThuoc, 
				ConTypeCode_REF AS LoaiHDLD, CV.EmpTypeCode_REF AS LoaiNhanVien, CV.DepartmentCode_REF AS BoPhanLamViec, cv.JobWCode_REF AS ChucDanhCongViec,
			--	M01, M02, M03, M04, M05, M06, M07, M08, M09, M10, M11, M12, Q01, Q02, Q03, Q04, H01, H02, AppYear,
				EDow_Num AS NgayCongChuan, IsServiceFee AS CoPhiDichVu,
				JoinedOn AS NgayVaoLam, EndDate AS NgayThoiViec, CareerDate AS NgayVaoNganh, PersonnelDate AS NgayVaoBienChe, 
				HiredOn AS NgayThanhNVChinhThuc, IsTUnion AS LaCongDoanVien, TUnionDate AS NgayVaoCongDoan, 
				IsHI AS CoThamGiaBHYT, IsSI AS CoThamGiaBHXH, IsUI AS CoThamGiaBHTN,
				AdvanceSal AS MucLuongTamUng, [HCSEM.GioiTinh_Val] AS GioiTinh, TUnionFee AS MucDongCongDoanPhi, AssignRegionCode_REF AS VungLamViec, 
				CAP3 AS BoPhanCap3, CAP2 AS BoPhanCap2, Birthday AS NgaySinh, CV.AcademicID AS HocHam, CV.Foreigner AS LaNguoiVietNam,
				WLeaveDayGroupCode_REF AS NhomNgayNghiTuan, BsSalary.InsSalary AS LuongDongBHXH, CV.EndDate_Plan as NgayDuKien_ThoiViec,
				IsDirectLabour AS LaLaoDongTrucTiep, @GroupSalCode as NhomLuong
			FROM(
				select EmployeeID, ConTypeCode_REF, EmpTypeCode_REF, DepartmentCode_REF, JobWCode_REF, IsServiceFee,
					JoinedOn, case when StoppedOn is not null then DATEADD(day, -1, StoppedOn) else StoppedOn end as EndDate, CareerDate, PersonnelDate, HiredOn,
					IsHI, IsSI, IsUI, AdvanceSal, [HCSEM.GioiTinh_Val], AssignRegionCode_REF,
					CAP3, CAP2, convert(datetime, Birthday, 103) AS Birthday, AcademicID, Foreigner, WLeaveDayGroupCode_REF,
					EndDate_Plan, IsDirectLabour, TUnionFee, TUnionDate, IsTUnion
				from HR_VWEmpCurriculumViateCV
				left join  HR_VMDepartmentFullLevel ON HR_VMDepartmentFullLevel.OrgUnitID = HR_VWEmpCurriculumViateCV.OrgUnitID
				where EmployeeID = @EmployeeID
			) as CV left outer join(
				SELECT EmployeeID, RealSalary, MinSalary, CoeffSalary, PieceWage, UnitOT, InsSalary
				FROM (
					select B.EmployeeID, RealSalary, MinSalary, CoeffSalary, PieceWage, InsSalary, UnitOT,
						ROW_NUMBER() OVER(PARTITION BY B.EmployeeID ORDER BY B.EffectDate desc) as RowID
					from HR_EmpBasicSalary AS B WITH (NOLOCK) 
					WHERE EmployeeID = @EmployeeID and (B.EffectDate <= @ToTime AND (B.EndDate IS NULL OR B.EndDate > @FromTime)) 
				) AS Z WHERE Z.RowID = 1
			) as BsSalary on CV.EmployeeID = BsSalary.EmployeeID
			LEFT OUTER JOIN (
				SELECT EmployeeID, RealSalary, MinSalary
				FROM (
					select B.EmployeeID, RealSalary, MinSalary, ROW_NUMBER() OVER(PARTITION BY B.EmployeeID ORDER BY B.EffectDate desc) as RowID
					from HR_EmpJWSalary AS B WITH (NOLOCK)
					WHERE EmployeeID = @EmployeeID and (B.EffectDate <= @ToTime AND (B.EndDate IS NULL OR B.EndDate > @FromTime)) 
				) AS z
			) as JwSalary ON BsSalary.EmployeeID = JwSalary.EmployeeID
			LEFT OUTER JOIN (
				select @EmployeeID as EmployeeID, PRTUnionAmount, PRSIStandardWD, PRPITFamilyTaxFreeOwn, PRPITFamilyTaxFreeUnit
				from HR_ConfigPR WITH (NOLOCK)
				WHERE (BUCode IS NULL OR (BUCode IS NOT NULL AND BUCode = @BUCode))
			) as SC ON CV.EmployeeID = SC.EmployeeID LEFT OUTER JOIN (
				SELECT @EmployeeID AS EmployeeID, TSMaxOTHourPerY, TSStandardWDOfOT
				FROM HR_ConfigTS WITH (NOLOCK)
				WHERE (BUCode IS NULL OR (BUCode IS NOT NULL AND BUCode = @BUCode))
			) AS TS ON CV.EmployeeID = TS.EmployeeID
			--left outer join #EPerApps as EPA on CV.EmployeeID = EPA.EmployeeID
			LEFT OUTER JOIN
			(
				SELECT EmployeeID, StandardWD AS EDow_Num FROM HR_ConfigTSEmpStandardWD WITH (NOLOCK) WHERE EmployeeID = @EmployeeID AND DowCode = @DowCode
			) as PRD on CV.EmployeeID = PRD.EmployeeID
			--LEFT OUTER JOIN (
			--	select EmployeeID, IsTUnion, TUnionDate, TUnionFee from HCSEM_EmpInfoUnion WITH (NOLOCK) where EmployeeID = @EmployeeID
			--) as EParty on CV.EmployeeID = EParty.EmployeeID
		) as CE LEFT JOIN #EIncome AS I ON CE.EmployeeID = I.EmployeeID

		-- Lấy tổng quỹ tiền lương group by theo GroupSalCode
		select ce.* into #HCSPR_FundSalaryUnit from (
			select GroupSalCode, Sum(TotalFund) as SalaryUnit from HR_PRFundSalaryUnit with (nolock) where DowCode = @DowCode AND 1 = 0 group by GroupSalCode
		) as ce

		-- Lay ve don gia tổng quỹ tiền lương
		SET @UnitOutput = 0
		Exec HR_spGetSalaryUnit @DowCode, @EmployeeID, @Fromtime, @ToTime, @GroupSalCode, @UnitOutput output
		declare @EmpSalProduct_Amount money
		set @EmpSalProduct_Amount = 0
		--exec HCSPR_spGetEmpSalProduct @DowCode, @EmployeeID, @ToTime, @GroupSalCode, @EmpSalProduct_Amount output

		select ce.* into #tmp_tbl_kow_f_1_row from (
			select @EmpSalProduct_Amount as ESalaryUnit
		) as ce

		-- Lay ve he so luong-thuong 
        select AFDE.* into #AFDE from ( 
            select R.CoeffCode, Sum( 
					case when IsSplit = 0 then Coefficient 
						WHEN IsSplit = 1 and Row_ID = 1 then Coefficient else 0 end) as Coefficient   
			from (
				select FDE.CoeffCode, FDE.Coefficient, SC.IsSplit, ROW_NUMBER() OVER(PARTITION BY FDE.EmployeeID, FDE.CoeffCode ORDER BY FDE.EmployeeID, FromTime desc) as Row_ID
				FROM HR_PRSalCoeffEmp as FDE WITH (NOLOCK) left outer join HR_LSSalCoeff as SC WITH (NOLOCK) on FDE.CoeffCode = SC.CoeffCode 
				Where EmployeeID = @EmployeeID and FromTime<=@ToTime and @FromTime<=ToTime 
			) as R
			Group By R.CoeffCode 
        ) as AFDE

	END
	ELSE
	BEGIN
		RETURN
	END

	DECLARE @EffectDate DATETIME, @tmpAmountNonTax FLOAT, @tmpAlloGradeCode VARCHAR(20), @IsTaxFreeAmountByYear BIT, @AmountNonTaxByYear FLOAT, @Year VARCHAR(4)
	SET @tmpAlloGradeCode = NULL
	SET @tmpAmountNonTax = 0
	SET @AmountNonTaxByYear = 0 -- 1. Tiền miễn thuế tính theo năm
	SET @Year = LEFT(@DowCode, 4)

	SELECT T.*, T1.IsTaxFreeAmountByYear, T1.SalaryInclude, T1.IsMonthAmount, T1.IsInPayroll, T1.CurrencyCode
	INTO #Result
	FROM HR_fnCreateDatetimeListOfAllowance_FillData(@FromTime, @ToTime, @EmployeeID, @BUCode) AS T
		inner join HR_LSAlloGrade as T1 WITH (NOLOCK) on T.AlloGradeCode = T1.AlloGradeCode
	WHERE T1.IsLawSalary = @IsLawSalary

	-- Ghi nhận lịch sử thay đổi thông tin phụ cấp
	-- Đã move ra salarylevel 2023.06.20
	--INSERT INTO HCSPR_ListOfEmpAllowance(DowCode, EmployeeID, FromTime, ToTime, AlloGradeCode, FixAmount, SalaryRate, EndDate, 
	--	fBeginDate, fEndDate, DepartmentCode, GroupSalCode, JobWCode, JobPosCode, EmpTypeCode, LabourType, WorkCenterCode, 
	--	AmountNoTax, CreatedOn, CreatedBy)
	--SELECT @DowCode, @EmployeeID, FromTime, ToTime, AlloGradeCode, FixAmount, SalaryRate, EndDate, fBeginDate, fEndDate, 
	--	DepartmentCode, GroupSalCode, JobWCode, JobPosCode, EmpTypeCode, LabourType, WorkCenterCode, AmountNoTax, 
	--	GETDATE() as CreatedOn, 'application' as CreatedBy
	--FROM #Result

	-- Lay ve danh sach phu cap cua nhan vien tinh cho 1 thang, hu?ng 1 lan trong thang
	DECLARE EAllowance_Cursor CURSOR FOR
	SELECT @EmployeeID, T.AlloGradeCode, CurrencyCode, T.IsMonthAmount, T.AmountNoTax, T.IsInPayroll, 
		T.FromTime, T.ToTime, T.FixAmount, T.SalaryRate, T.IsTaxFreeAmountByYear, T.GroupSalCode
	FROM #Result AS T
	ORDER BY SalaryInclude
	OPEN EAllowance_Cursor
	WHILE 1 = 1
	BEGIN
		FETCH NEXT FROM EAllowance_Cursor INTO @EmployeeID, @AlloGradeCode, @UICurrencyCode, @IsMonthAmount,@AmountNonTax, @IsInPayroll, 
			@Allo_EffectDate, @EndDate, @FixAmount, @SalaryRate, @IsTaxFreeAmountByYear, @GroupSalCode
		IF @@FETCH_STATUS != 0
			BREAK;

		-- cap nhat lai nhom luong
		update #ASFactors set NhomLuong = @GroupSalCode where EmployeeID = @EmployeeID

		IF @IsTaxFreeAmountByYear = 1
		BEGIN
			-- Tìm tổng tiền đã miễn thuế theo năm tính tới trước thời điểm tính lương
			SELECT @AmountNonTaxByYear = ISNULL(SUM(T.AmountNonTax), 0)
			FROM dbo.HR_PayAllowance AS T WITH (NOLOCK)
			WHERE T.EmployeeID = @EmployeeID AND T.AlloGradeCode = @AlloGradeCode 
				AND LEFT(T.DowCode, 4) = @Year and T.DowCode <= @DowCode
        END

		IF @tmpAlloGradeCode IS NULL OR @tmpAlloGradeCode <> @AlloGradeCode
		BEGIN
			IF @IsTaxFreeAmountByYear = 0
			BEGIN
				-- miễn thuế theo tháng
				SET @tmpAmountNonTax = @AmountNonTax
			end
			ELSE
			begin
				IF @AmountNonTax > @AmountNonTaxByYear 
					SET @tmpAmountNonTax = @AmountNonTax - @AmountNonTaxByYear
				ELSE
					SET @tmpAmountNonTax = 0
            END
            --
			SET @tmpAlloGradeCode = @AlloGradeCode
		END
        
		-- lay ty gia	
		IF @UICurrencyCode ='' OR @UICurrencyCode IS NULL OR LEN(@UICurrencyCode) = 0 -- Neu trong DM PC ko chon nguyen te tinh PC thi gan nguyen te tinh PC = nguyen te tinh luong cua NV
			SET @UICurrencyCode = @E_CurrencyCode
	
		IF @UICurrencyCode <> @E_CurrencyCode	-- Neu nguyen te PC <> nguyen te tinh luong cua NV thi tim ty gia cua nguyen te PC
			SELECT TOP(1) @E_RateToVNDAllo = RateToVND FROM HR_fnGetPayExchangeRate(@BUCode, @DowCode, @UICurrencyCode)
		ELSE 
			SET @E_RateToVNDAllo = @E_RateToVND

		SET @E_RateToVNDAllo = ISNULL(@E_RateToVNDAllo, 1)
		SET @AmountTemp = 0
		

		SET @EndDate = case when @EndDate IS null then @ToTime else @EndDate end
		-- Lay mốc thời gian tạm (FromTime)
		-- SET @tempTime = DATEADD(DAY,-1,@FromTime)
		SET @tempTime = DATEADD(DAY,-1, @Allo_EffectDate)
			print('aadsad')

		if @IsMonthAmount = 1
		begin			
			IF not exists (select top(1) 1 from #EWork) -- Trong thang nhân viên khong co quyet dinh thuyên chuyển nào
			begin
				-- Phan ra cong thuc, tinh tung phu cap 1				
				exec HR_spBuildFormula4KowOrAllo @EmployeeID, @DowCode, @AlloGradeCode, @SI_MinSalary, @SI_MaxSalary, 
				'HR_LSAlloGrade', 0, 0, 0, 0, 
				0, 0, 0, 0, 0, 
				@GroupSalCode, @FixAmount, @SalaryRate, @Allo_EffectDate, @EndDate, 
				@Dow_Num, @E_RateToVNDAllo, @InsSalary, @ProductSal,@UnitOutput,
				-1, -1, @AmountTemp output

				SET @AmountTemp = case when @AmountTemp is null then 0 else @AmountTemp end
			end
			ELSE
			begin
				if not exists ( 
					SELECT top(1) 1 from HR_SysFormula WITH (NOLOCK)
					where ListType = 'HR_LSAlloGrade' and ListCode = @AlloGradeCode and GroupSalCode = @GroupSalCode
						and (Atom = 'DepartmentCode_REF' Or Atom = 'JobWCode_REF'))
				begin
					-- Phan ra cong thuc, tinh tung phu cap 1
					exec HR_spBuildFormula4KowOrAllo @EmployeeID, @DowCode, @AlloGradeCode, @SI_MinSalary, @SI_MaxSalary, 
					'HR_LSAlloGrade', 0, 0, 0, 0, 
					0, 0, 0, 0, 0, 
					@GroupSalCode, @FixAmount, @SalaryRate, @Allo_EffectDate, @EndDate, 
					@Dow_Num, @E_RateToVND, @InsSalary, @ProductSal,@UnitOutput,
					-1, -1, @AmountTemp output

					SET @AmountTemp = case when @AmountTemp is null then 0 else @AmountTemp end
				end
				else
				begin
					SET @AmountTemp = 0
					SET @Amount2 = 0
					DECLARE Cursor_1 CURSOR FOR
						select EmployeeID, FromTime, ToTime, OrgUnitID, PositionID from #EWork
						Order By FromTime 
					OPEN Cursor_1
					WHILE 1 = 1
					BEGIN
						FETCH NEXT FROM Cursor_1 INTO @mEmpID, @BeginDate, @EndDate, @DepartmentCode, @JobWCode
						IF @@FETCH_STATUS != 0
							BREAK;
						IF DATEDIFF(day, @tempTime, @BeginDate) >= 2
						begin
							SET @t1 = DATEADD(DAY,1,@tempTime)
							SET @t2 = DATEADD(DAY,-1,@BeginDate)

							-- Phan ra cong thuc, tinh tung phu cap 1				
							exec HR_spBuildFormula4KowOrAllo @EmployeeID, @DowCode, @AlloGradeCode, @SI_MinSalary, @SI_MaxSalary, 
							'HR_LSAlloGrade', 0, 0, 0, 0, 
							0, 0, 0, 0, 0, 
							@GroupSalCode, @FixAmount, @SalaryRate, @t1, @t2, 
							@Dow_Num, @E_RateToVNDAllo, @InsSalary, @ProductSal,@UnitOutput,
							-1, -1, @Amount2 output

							set @AmountTemp = (case when @Amount2 is null then 0 else @Amount2 end) + @AmountTemp
						end	
						SET @tempTime = @EndDate

						set @JobWCode = case when @JobWCode is null then '-1' else @JobWCode end
						-- Phan ra cong thuc, tinh tung phu cap 1				
						exec HR_spBuildFormula4KowOrAllo @EmployeeID, @DowCode, @AlloGradeCode, @SI_MinSalary, @SI_MaxSalary, 
						'HR_LSAlloGrade', 0, 0, 0, 0, 
						0, 0, 0, 0, 0, 
						@GroupSalCode, @FixAmount, @SalaryRate, @BeginDate, @EndDate, 
						@Dow_Num, @E_RateToVNDAllo, @InsSalary, @ProductSal,@UnitOutput,
						-1, -1, @Amount2 output

						set @AmountTemp = (case when @Amount2 is null then 0 else @Amount2 end) + @AmountTemp

					END
					CLOSE Cursor_1  
					DEALLOCATE Cursor_1
				end
			end

		end
		else	
		begin

			SET @CurDate = @Allo_EffectDate
			While DATEDIFF(DAY, @CurDate, @EndDate) >= 0
			BEGIN	
				set @Amount2 = 0

				If exists(select top(1) 1 from #EWork where @CurDate between FromTime and ToTime) 
				begin
					Select top(1) @DepartmentCode = OrgUnitID, @JobWCode = PositionID from #EWork where @CurDate between FromTime and ToTime
					set @JobWCode = case when @JobWCode is null then '-1' else @JobWCode end
					-- Xet tu ngay @fBeginDay , den ngay @ToTime cua ky tinh luong
					exec HR_spBuildFormula4KowOrAllo @EmployeeID, @DowCode, @AlloGradeCode, @SI_MinSalary, @SI_MaxSalary, 
						'HR_LSAlloGrade', 0, 0, 0, 0, 
						0, 0, 0, 0, 0, 
						@GroupSalCode, @FixAmount, @SalaryRate, @CurDate, @CurDate, 
						@Dow_Num, @E_RateToVNDAllo, @InsSalary, @ProductSal,@UnitOutput,
						@DepartmentCode, @JobWCode, @Amount2 output
				end
				Else
				begin 
					-- Xet tu ngay @fBeginDay , den ngay @ToTime cua ky tinh luong
					exec HR_spBuildFormula4KowOrAllo @EmployeeID, @DowCode, @AlloGradeCode, @SI_MinSalary, @SI_MaxSalary, 
						'HR_LSAlloGrade', 0, 0, 0, 0, 
						0, 0, 0, 0, 0, 
						@GroupSalCode, @FixAmount, @SalaryRate, @CurDate, @CurDate, 
						@Dow_Num, @E_RateToVNDAllo, @InsSalary, @ProductSal,@UnitOutput,
						-1, -1, @Amount2 output
				end

				set @AmountTemp = (case when @Amount2 is null then 0 else @Amount2 end) + @AmountTemp
				if @Amount2>0 
				set @soluot=@soluot+1
				SET @CurDate = DATEADD(day, 1, @CurDate)
			END
		end

		-- Chen phu cap vua tinh duoc vao bang phu cap chi tiet
		IF @AmountTemp != 0
		BEGIN

			SET @Amount = @AmountTemp
			SET @AmountTT = 0
			
			if isnull(@UICurrencyCode, '') = ''
			begin
				if @PRCurrencyForPay = @E_CurrencyCode
				begin
					set @AmountTT = @Amount * @E_RateToVND
				end
				else
				begin
					set @AmountTT = @Amount / @E_RateToVND
				END
			end
			else
			begin
				-- Nếu N.Tệ phát sinh = N.Tệ thanh toán
				if @UICurrencyCode = @PRCurrencyForPay
				begin
					-- Nếu N.Tệ phát sinh = N.Tệ tính lương của nv
					if @PRCurrencyForPay = @E_CurrencyCode
					begin
						set @AmountTT = @Amount * @E_RateToVND
					end
					else -- Nguyên tệ tính lương nv khác N.Tệ phát sinh
					begin
						set @AmountTT = @Amount
						set @Amount = @Amount / @E_RateToVND
					end
				end
				else if @UICurrencyCode <> @PRCurrencyForPay -- N.Tệ phát sinh khác N.Tệ thanh toán
				begin
					if @PRCurrencyForPay = @E_CurrencyCode
					begin
						set @AmountTT = @Amount * @E_RateToVND
						set @Amount = @AmountTT 
					end
					else
					begin
						if @UICurrencyCode = @E_CurrencyCode
						begin
							set @AmountTT = @Amount * @E_RateToVND
						end
						else
						BEGIN
							set @AmountTT = @Amount * @E_RateToVNDAllo
							SET @Amount = @AmountTT / @E_RateToVND
						end
					end
				end
				else
					continue;
			END
			
			-- Tính tiền miễn thuế theo tháng
			IF (@tmpAmountNonTax > 0 and @AmountTT < @tmpAmountNonTax)
			BEGIN 
				IF @AmountTT < 0	
					SET @tmpAmountNonTax = 0 
				ELSE
					SET @tmpAmountNonTax = @AmountTT
			END
			INSERT INTO HR_PayAllowance(EmployeeID, AlloGradeCode, FromTime, ToTime, Amount, AmountF, DowCode, DayNum, AmountNonTax, CreatedOn, CreatedBy)
			Values(@EmployeeID, @AlloGradeCode, @Allo_EffectDate, @EndDate,Round(@AmountTT, @App_ForgCurrAmtDec), 
				ROUND(@Amount, @App_BaseAmtDec), @DowCode, @soluot, ROUND(@tmpAmountNonTax, @App_ForgCurrAmtDec), GETDATE(), 'application')

			SET @tmpAmountNonTax = dbo.HR_fnFht_Max(0, @AmountNonTax - @tmpAmountNonTax)

			-- cap nhật lại danh sach phu cap
			if not exists(select top(1)1 from #AALLO Where AlloGradeCode = @AlloGradeCode)
				Insert into #AALLO(AlloGradeCode, AmountF) values(@AlloGradeCode, Round(case when @UICurrencyCode = @E_CurrencyCode then @AmountTemp else @AmountTemp / @E_RateToVNDAllo end, @App_BaseAmtDec))
			else
				Update #AALLO set AmountF = AmountF + Round(case when @UICurrencyCode = @E_CurrencyCode then @AmountTemp else @AmountTemp / @E_RateToVNDAllo end, @App_BaseAmtDec) Where AlloGradeCode = @AlloGradeCode

			if @IsInPayroll = 1
				SET @TotalAllF = @TotalAllF + @Amount				
		END
	END
	CLOSE EAllowance_Cursor  
	DEALLOCATE EAllowance_Cursor

	-- Cap nhat phu cap com
	declare @mAmountRiceF money set @mAmountRiceF =0
	SELECT @mAmountRiceF=isnull(SUM(isnull(AmountF,0)),0) 
	FROM HR_PayAllowance T WITH (NOLOCK) INNER JOIN HR_LSAlloGrade L WITH (NOLOCK) ON T.AlloGradeCode = L.AlloGradeCode
	WHERE EmployeeID = @EmployeeID AND DowCode = @DowCode AND IsLawSalary = 0
	 AND IsInPayroll = 1 AND AlloType = 2 AND IsUserFormula = 1 

	DECLARE @TotalAll money
	SET @TotalAll =  Round(@TotalAllF * @E_RateToVNDAllo, @App_ForgCurrAmtDec)
	-- Cap nhat lai bang incomes
	UPDATE HR_PayIncome Set 
		RiceAllowance = @mAmountRiceF,
		TotalAllowance = ROUND( TotalAllowance + @TotalAllF - @mAmountRiceF, @App_BaseAmtDec), 
		GrossSal = GrossSal + @TotalAllF, 
		GrossSalVND = GrossSalVND + @TotalAll, 
		NetSal = NetSal + @TotalAllF, 
		NetSalVND = NetSalVND + @TotalAll where RecID = @ID
	RETURN


-----------------------------------------------------3
USE [codx_hr]
GO
/****** Object:  StoredProcedure [dbo].[HR_spGetDeductionSI_BySalary]    Script Date: 1/21/2025 5:42:25 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[HR_spGetDeductionSI_BySalary]  
(
	@DowCode varchar(7) = '2016/01', -- Giá trị ngày nghỉ việc làm can cứ báo giảm trong tháng
	@strEmps nvarchar(max) = N'__NV001__'
)
AS
BEGIN
	

	--SELECT * FROM TblSysAdmin_Table WHERE TableNameHCS = 'HCSLS_PayExchangeRate'
	--DECLARE @t TABLE(EmployeeID NVARCHAR(20), MinSalary money, CoeffSalary float, Real_Salary money, EndDate datetime, mTyleBHXH float, mTyleBHYT float, 
	--		mTyleBHTN float, mAmountSI money, mBHXHMax money, mBHYTMax money, mBHTNMax money, SalaryInsO money, SalaryInsO_YT money, SalaryInsO_TN money,
	--		JobAllo float, SeniorAllo float, SeniorOverAllo float, OtherAllo float, Amount money, CoeffJobAllo float, CoeffSeniorAllo float, CoeffSeniorOverAllo float, CoeffOtherAllo float, TotalCoeffAllo float,
	--		DateNum float, KowType int, mTyleBHXHCN float, mTyleBHXHCT float, mTyleBHYTCN float, mTyleBHYTCT float, mTyleBHTNCN float, mTyleBHTNCT float, AmountF money,
	--		Active bit, ReturnKCBDate DATETIME, GroupType int, bs_EffectDate datetime)

	SELECT ISNULL(T.BUCode, N'') AS BUCode, T.KowCode, EmployeeID
	INTO #EKows FROM (
		select BUCode, EmployeeID, col.value('data(n[1])', 'nvarchar(20)') as KowCode
		from ( 
			select cast(N'<r><n>' + REPLACE(PRSIKowCodes, N',', N'</n></r><r><n>') + N'</n></r>' as XML) AS xKow, BUCode, EmployeeID
			from #Employee_Config where ISNULL(PRSIKowCodes,'') != ''
		) as ABC cross apply xKow.nodes('/r')  tbl(col)
	) AS T 


	SELECT ce.* INTO #EDayOffs FROM (
		select Emps.EmployeeID, Emps.IsSI, Emps.IsHI, Emps.IsUI, Emps.E_EndDate, Emps.E_Active, Emps.CurrencyCode, Emps.GroupType, Emps.E_ReturnKCBDate, 
			0 as KowType,
			0 as DateNum
		from #Employee_Config as Emps
	) AS ce
	SELECT ce.* INTO #EReduceDeduceTax FROM (
		select R.EmployeeID, 
			case when ExchangeEmpTax <> 1 then 75000 * ExchangeEmpTax else gPRPITFamilyTaxFreeUnit_Peru end * isnull(soluong,0) as gPRPITFamilyTaxFreeUnit,
			case when ExchangeEmpTax <> 1 then 0 else gPRPITFamilyTaxFreeOwn_Peru end as gPRPITFamilyTaxFreeOwn
		from (
			select EmployeeID, isnull(case when PER.CurrencyCode = 'VND' or PER.CurrencyCode is null then 1 else PER.RateToVND end, 1) as ExchangeEmpTax,
				gPRPITFamilyTaxFreeOwn_Peru, gPRPITFamilyTaxFreeUnit_Peru
			from #Employee_Config as E 
				--INNER join HR_LSTax as T WITH (NOLOCK) on E.TaxCode = T.TaxCode AND (T.BUCodes IS NULL OR (T.BUCodes IS NOT NULL AND T.BUCodes LIKE '%,' + E.BUCode + ',%'))
				LEFT JOIN (
					SELECT RateToVND, CurrencyCode, BUCodes, CurrencyForPay 
					from dbo.HR_LSPayExchangeRate WITH (NOLOCK) where DowCode = @DowCode
				) as PER on E.CurrencyCode = PER.CurrencyCode 
					AND (PER.CurrencyForPay IS NULL OR (PER.CurrencyForPay IS NOT NULL AND PER.CurrencyForPay = E.PRCurrencyForPay))
					AND (PER.BUCodes IS NULL OR (PER.BUCodes IS NOT NULL AND PER.BUCodes LIKE '%,' + E.BUCode + ',%'))
		) as R left outer join (
			SELECT E.EmployeeID, Count(F.RecID) as soluong
			FROM #Employee_Config as E 
			inner join HR_EmpFamily as F with (nolock) on E.EmployeeID = F.EmployeeID 
			WHERE IsReduceTax <> 0 AND FromMonth <= @DowCode AND (ToMonth = '' OR ToMonth IS NULL OR ToMonth >= @DowCode)
			group by E.EmployeeID
		) as F on R.EmployeeID = F.EmployeeID
	) AS ce

	-- Tìm bhxh max
	-- mAmountSI: Muc luong dong BHXH
	-- mBHXHMax: Muc tran dong BH
	-- SalaryInsO: Muc luong trich BH Thuc te
	--insert into @t(EmployeeID, MinSalary, CoeffSalary, Real_Salary, EndDate, mTyleBHXH, mTyleBHYT, 
	--		mTyleBHTN, mAmountSI, mBHXHMax, mBHYTMax, mBHTNMax, SalaryInsO, SalaryInsO_YT, SalaryInsO_TN,
	--		JobAllo, SeniorAllo, SeniorOverAllo, OtherAllo, Amount, CoeffJobAllo, CoeffSeniorAllo, CoeffSeniorOverAllo, CoeffOtherAllo, TotalCoeffAllo,
	--		DateNum, KowType, mTyleBHXHCN, mTyleBHXHCT, mTyleBHYTCN, mTyleBHYTCT, mTyleBHTNCN, mTyleBHTNCT, AmountF,
	--		Active, ReturnKCBDate, GroupType, bs_EffectDate)
	SELECT Result.EmployeeID, Result.MinSalary, Result.CoeffSalary, Result.SalarySocial as Real_Salary, Result.EndDate, Result.mTyleBHXH, Result.mTyleBHYT, 
			Result.mTyleBHTN, Result.mAmountSI, Result.mBHXHMax, Result.mBHYTMax, Result.mBHTNMax, 
			CASE WHEN Result.mAmountSI > Result.mBHXHMax Then Result.mBHXHMax ELSE Result.mAmountSI END SalaryInsO,
			CASE WHEN Result.mAmountSI > Result.mBHYTMax Then Result.mBHYTMax ELSE Result.mAmountSI END SalaryInsO_YT,
			CASE WHEN Result.mAmountSI > Result.mBHTNMax Then Result.mBHTNMax ELSE Result.mAmountSI END SalaryInsO_TN,
			Result.JobAllo, Result.SeniorAllo, Result.SeniorOverAllo, Result.OtherAllo, Result.Amount, Result.CoeffJobAllo, Result.CoeffSeniorAllo, Result.CoeffSeniorOverAllo, Result.CoeffOtherAllo, Result.TotalCoeffAllo,
			ISNULL(DateNum, 0) as DateNum, ISNULL(KowType, 0) as KowType, mTyleBHXHCN, mTyleBHXHCT, mTyleBHYTCN, mTyleBHYTCT, mTyleBHTNCN, mTyleBHTNCT, Result.AmountF,
			ISNULL(Result.Active, 0) as Active, Result.ReturnKCBDate, Result.GroupType, bs_EffectDate
	FROM (	
		SELECT E.EmployeeID, E.CurrencyCode, E.MinSalary, E.GroupType, E.CoeffSalary, E.SalarySocial, E.EndDate, 
			CASE WHEN E.GroupType >= 8 AND E.GroupType <= 12 and PRIsPaySINet = 0 
				THEN (
					SELECT 
						case when isnull(GrossIncome,0) + gPRPITFamilyTaxFreeOwn + gPRPITFamilyTaxFreeUnit < SI_MaxSalary * (100 - (CASE WHEN E.IsSI = 1 THEN SI_RateEmp ELSE 0 END + CASE WHEN E.IsHI = 1 THEN HI_RateEmp ELSE 0 END + CASE WHEN E.IsUI = 1 THEN UI_RateEmp ELSE 0 END))/100.0
							then (isnull(GrossIncome,0) + gPRPITFamilyTaxFreeOwn + gPRPITFamilyTaxFreeUnit) / ((100 - (CASE WHEN E.IsSI = 1 THEN SI_RateEmp ELSE 0 END + CASE WHEN E.IsHI = 1 THEN HI_RateEmp ELSE 0 END + CASE WHEN E.IsUI = 1 THEN UI_RateEmp ELSE 0 END))/100.0)
						else (isnull(GrossIncome,0) + gPRPITFamilyTaxFreeOwn + gPRPITFamilyTaxFreeUnit) + SI_MaxSalary * ((CASE WHEN E.IsSI = 1 THEN SI_RateEmp ELSE 0 END + CASE WHEN E.IsHI = 1 THEN HI_RateEmp ELSE 0 END + CASE WHEN E.IsUI = 1 THEN UI_RateEmp ELSE 0 END))/100.0
						end as GrossIncome
					FROM HR_fnNetToGross(E.EmployeeID, E.SalarySocial + ISNULL(CAE.Amount * RateToSocial, 0) - gPRPITFamilyTaxFreeUnit - gPRPITFamilyTaxFreeOwn)
				) 
			ELSE E.SalarySocial + ISNULL(CAE.Amount * RateToSocial, 0) END as mAmountSI,
			ISNULL(CAE.JobAllo * RateToSocial, 0) as JobAllo, ISNULL(CAE.SeniorAllo * RateToSocial,0) as SeniorAllo, ISNULL(CAE.SeniorOverAllo * RateToSocial, 0) as SeniorOverAllo, ISNULL(CAE.OtherAllo * RateToSocial, 0) as OtherAllo, ISNULL(CAE.Amount * RateToSocial, 0) as Amount,
			ISNULL(CAE.CoeffJobAllo, 0) as CoeffJobAllo, ISNULL(CAE.CoeffSeniorAllo, 0) as CoeffSeniorAllo, ISNULL(CAE.CoeffSeniorOverAllo, 0) as CoeffSeniorOverAllo, ISNULL(CAE.CoeffOtherAllo, 0) as CoeffOtherAllo, 
			ISNULL(CAE.AmountF,0) + E.CoeffSalary as TotalCoeffAllo, ISNULL(CAE.AmountF,0) AS AmountF,
			CASE WHEN E.IsSI = 0 AND E.IsHI = 0 AND E.IsUI = 1 THEN UI_RateEmp + UI_RateCo
				WHEN E.IsSI = 0 AND E.IsHI = 1 AND E.IsUI = 0 THEN HI_RateEmp + HI_RateCo
				WHEN E.IsSI = 0 AND E.IsHI = 1 AND E.IsUI = 1 THEN HI_RateEmp + HI_RateCo + UI_RateEmp + UI_RateCo
				WHEN E.IsSI = 1 AND E.IsHI = 0 AND E.IsUI = 0 THEN SI_RateEmp + SI_RateCo
				WHEN E.IsSI = 1 AND E.IsHI = 0 AND E.IsUI = 1 THEN SI_RateEmp + SI_RateCo + UI_RateEmp + UI_RateCo
				WHEN E.IsSI = 1 AND E.IsHI = 1 AND E.IsUI = 0 THEN SI_RateEmp + SI_RateCo + HI_RateEmp + HI_RateCo
				WHEN E.IsSI = 1 AND E.IsHI = 1 AND E.IsUI = 1 THEN SI_RateEmp + SI_RateCo + HI_RateEmp + HI_RateCo + UI_RateEmp + UI_RateCo
				ELSE 0 END as mTyleBHXH, 
			CASE WHEN E.IsHI = 1 THEN HI_RateEmp + HI_RateCo ELSE 0 END as mTyleBHYT, 
			CASE WHEN E.IsUI = 1 THEN UI_RateEmp + UI_RateCo ELSE 0 END as mTyleBHTN, 
			CASE WHEN E.IsSI = 1 THEN SI_MaxSalary ELSE SI_MaxSalary END as mBHXHMax,
			CASE WHEN E.IsHI = 1 THEN HI_MaxSalary ELSE HI_MaxSalary END as mBHYTMax,
			CASE WHEN E.IsUI = 1 THEN UI_MaxSalary ELSE UI_MaxSalary END as mBHTNMax,
			CASE WHEN E.IsSI = 1 THEN SI_RateEmp ELSE 0 END as mTyleBHXHCN,
			CASE WHEN E.IsSI = 1 THEN SI_RateCo ELSE 0 END as mTyleBHXHCT,
			CASE WHEN E.IsHI = 1 THEN HI_RateEmp ELSE 0 END as mTyleBHYTCN,
			CASE WHEN E.IsHI = 1 THEN HI_RateCo ELSE 0 END as mTyleBHYTCT,
			CASE WHEN E.IsUI = 1 THEN UI_RateEmp ELSE 0 END as mTyleBHTNCN,
			CASE WHEN E.IsUI = 1 THEN UI_RateCo ELSE 0 END as mTyleBHTNCT, E.Active, E.ReturnKCBDate, DateNum, KowType, bs_EffectDate
		FROM
		(
			SELECT 1 as ID, K.EmployeeID, K.CurrencyCode, K.GroupType, 
				CASE WHEN PRIsSIByCurrencyForCal = 1 OR PRCurrencyForPay = K.CurrencyCode THEN MinSalary ELSE MinSalary * PR.RateToSocial END AS MinSalary, K.CoeffSalary, 
				CASE WHEN PRIsSIByCurrencyForCal = 1 OR PRCurrencyForPay = K.CurrencyCode THEN SalarySocial ELSE SalarySocial * PR.RateToSocial END AS SalarySocial, K.EndDate, K.IsSI, K.IsHI, K.IsUI, K.Active, K.ReturnKCBDate, 
				CASE WHEN PRIsSIByCurrencyForCal = 1 OR PRCurrencyForPay = K.CurrencyCode THEN 1 ELSE PR.RateToSocial END as RateToSocial, DateNum, KowType, EffectDate as bs_EffectDate,
				PRIsPaySINet, BUCode, PRCurrencyForPay,
				SI_RateEmp, SI_RateCo, SI_MinSalary, SI_MaxSalary, HI_RateEmp, HI_RateCo, HI_MinSalary, HI_MaxSalary, UI_RateEmp, UI_RateCo, UI_MinSalary, UI_MaxSalary
			FROM ( 
					-- Lay ve danh sach nhan vien thoa DK
					-- 1. Lấy quyết dịnh lương mới nhất.
					-- 2. Phải dóng it nhất 1 trong 3 loại BH: BHXH, BHYT, BHTN
					-- 3. Neu nhan vien nghi viec --> Ngay nghi phai lớn hơn ngày làm căn cứ bao giam BHYT
					--		Hoac Neu nhan vien chua nghi viec --> Hoac nghi nghi null, hoac ngay nghi '', hoac ngay nghi lon hon ngay lam can cu bao giam BHYT
					-- 4. Nếu NV nghỉ >= 14
					--		a. Nếu tồn tại các loại công: CO, OM, RO --> vẫn trích nộp bình thường
					--		b. Nếu không tồn tại các loại công: CO, OM, RO --> không trích
					SELECT @DowCode AS YYYYMM, E.EmployeeID, E_EndDate AS EndDate, E.CurrencyCode, E.GroupType, E_Active AS Active, E.IsSI, E.IsHI, E.IsUI, E.E_ReturnKCBDate AS ReturnKCBDate,
						BS.EffectDate, BS.MinSalary, BS.CoeffSalary, BS.SalarySocial, E.DateNum, E.KowType,
						PRIsSIByCurrencyForCal, PRCurrencyForPay, PRIsPaySINet, BUCode, fBegDay, fEndDay,
						SI_RateEmp, SI_RateCo, SI_MinSalary, SI_MaxSalary, HI_RateEmp, HI_RateCo, HI_MinSalary, HI_MaxSalary, UI_RateEmp, UI_RateCo, UI_MinSalary, UI_MaxSalary
					FROM #EDayOffs as E 
					inner join (
						select E.EmployeeID, EffectDate, case when PRIsMinSalByInsList = 1 then SI_MinSalary else MinSalary end as MinSalary, CoeffSalary, 
							CASE when PRIsMinSalByInsList = 1 then SI_MinSalary * CoeffSalary else BS.InsSalary end as SalarySocial, 								
							IsCurrent, ROW_NUMBER() OVER(PARTITION BY E.EmployeeID ORDER BY E.EmployeeID, EffectDate desc) as Row_ID,
							PRIsSIByCurrencyForCal, PRCurrencyForPay, PRIsPaySINet, BUCode, fBegDay, fEndDay,
							SI_RateEmp, SI_RateCo, SI_MinSalary, SI_MaxSalary, HI_RateEmp, HI_RateCo, HI_MinSalary, HI_MaxSalary, UI_RateEmp, UI_RateCo, UI_MinSalary, UI_MaxSalary
						from #Employee_Config as E inner join HR_EmpBasicSalary as BS WITH (NOLOCK) on E.EmployeeID = BS.EmployeeID
						where (EffectDate < Eff_DateNotSi)
							and (E.E_EndDate = '' or E.E_EndDate is null or EffectDate < E.E_EndDate)
					) as BS ON E.EmployeeID = BS.EmployeeID and BS.Row_ID = 1
				) as K LEFT OUTER JOIN 
				(
					select Per.DowCode, PER.CurrencyCode, PER.RateToSocial, PER.BUCodes, PER.CurrencyForPay from dbo.HR_LSPayExchangeRate as PER WITH (NOLOCK)
				) AS PR ON K.YYYYMM = PR.DowCode AND K.CurrencyCode = PR.CurrencyCode 
					AND (PR.CurrencyForPay IS NULL OR (PR.CurrencyForPay IS NOT NULL AND PR.CurrencyForPay = K.PRCurrencyForPay))
					AND (PR.BUCodes IS NULL OR (PR.BUCodes IS NOT NULL AND PR.BUCodes LIKE '%,' + K.BUCode + ',%'))
				-- Lay phu cap nhan vien tham gia dong bhxh
		) as E 
		-- Lấy thông tin GTGC, GTBT
		LEFT OUTER JOIN #EReduceDeduceTax as RDT on E.EmployeeID = RDT.EmployeeID
		-- Lấy về ds PC tham gia trich nộp BHXH
		LEFT OUTER JOIN #tblSiAllowance as CAE ON E.EmployeeID = CAE.EmployeeID
	) as Result

RETURN
END


---------------------------------------------------------------------4
USE [codx_hr]
GO
/****** Object:  StoredProcedure [dbo].[HR_spConvertSocialInsToSocialInsHK]    Script Date: 1/21/2025 5:47:40 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[HR_spConvertSocialInsToSocialInsHK]
(
	@DowCode varchar(7) = '2022/07',
	@strEmps nvarchar(max) = '130352'
)
AS
	SELECT ce.* INTO #mEmps FROM (
		SELECT data AS EmployeeID FROM HR_FNSplitString(@strEmps, N',')
	) AS ce OPTION (MAXRECURSION 0)

	-- Danh sách phòng ban đã bị khóa
	select ce.* into #Deps from (
		select OrgUnitID from HR_fnGetUserLockPayroll_Salary(@DowCode) --where 1=0
	) as ce
	
	select EmployeeID into #tmpSI from (
		select T.EmployeeID from HR_SocialIns as T with (nolock) inner join #mEmps as T1 on T.EmployeeID = T1.EmployeeID
		where T.DowCode = @DowCode
		union all
		select T.EmployeeID from HR_SocialInsAdjust as T with (nolock) inner join #mEmps as T1 on T.EmployeeID = T1.EmployeeID
		where T.AdjDowCode = @DowCode
	) as ce group by EmployeeID

	select ce.* into #employee_filters from (
		select E.EmployeeID, T1.PositionName
		from #mEmps as F 
			INNER JOIN HR_Employees as E with (nolock) on F.EmployeeID = E.EmployeeID
			LEFT JOIN #Deps as Deps on E.OrgUnitID = Deps.OrgUnitID 
			LEFT JOIN dbo.HR_Positions AS T1 WITH (NOLOCK) ON E.PositionID = T1.PositionID
			left join #tmpSI as T2 on F.EmployeeID = T2.EmployeeID
		WHERE Deps.OrgUnitID is null 
		-- nv đang làm việc hoặc nghỉ việc tháng trước, tháng này mới báo giảm
		and (E.StoppedOn is null 
			or (convert(varchar(7), E.StoppedOn, 111) > @DowCode) 
			or (convert(varchar(7), E.StoppedOn, 111) <= @DowCode and T2.EmployeeID is not null))
	) as ce 


	-- Trả trợ cấp thôi việc: NGHỈ ỐM & TS
	-- and (NumAdd = 5 or (NumAdd = 6 and KowType = 7)) -- 7: CO, 4: KL
	select EmployeeID, mNote, NumAdd, BasicSalContract, CoeffSalContract, RealSalContract, SalaryIns, 
			JobAllo, SeniorAllo, SeniorOverAllo, OtherAllo, TotalAllo, 
			CoeffJobAllo, CoeffSeniorAllo, CoeffSeniorOverAllo, CoeffOtherAllo, TotalCoeffAllo, 
			TotalCoeffIns, TotalSalIns, RealSalSI,
			SIRateE, SIRateC, UIRateE, UIRateC, HIRateE, HIRateC, KowType, AdjDowCode
	INTO #HR_SocialInsAdjust
	from (
		SELECT T.EmployeeID, T.AdjDowCode, --@DowCode + ': ' + T2.KowName + ' (' + T2.KowCode + ')' AS mNote, 
			cast(
			case when T.KowType = 21 then 'OF_1' -- Nghỉ ốm ngắn ngày
				when T.Kowtype = 22 then 'OF_2' -- Nghi ốm dài ngày
				when NumAdd in (8,22) then 'DC' -- Giảm mức đóng
				when NumAdd in (17,19) then 'TU' -- Tăng BHYT
				when NumAdd in (20) then 'GN' -- Tăng BHTN
				when NumAdd in (2,3,4) then 'GH'
				when NumAdd in (6) THEN 
					CASE WHEN T.KowType IN (7) THEN 'SL'
					ELSE 'KL' END
				when NumAdd in (5) then 'ML'
				WHEN NumAdd = 1 AND KowTypePreM NOT IN (9,19) THEN 'TM' -- Tang mới
				WHEN (NumAdd = 1 AND KowTypePreM IN (9,19)) OR T.NumAdd = 14 THEN 'ON' -- Nghỉ TS đi làm lại
				WHEN NumAdd IN (16,7,21,27) THEN 'DC' -- Tăng mức đóng
				--WHEN NumAdd IN (11,12,13,18,14) THEN 'TT' -- Tăng BHYT
				WHEN NumAdd IN (15) THEN 'TN' -- Tăng BHTN
			end as varchar(200)) as mNote,
			NumAdd,
			BasicSalContract, CoeffSalContract, RealSalContract, SalaryIns, 
			JobAllo, SeniorAllo, SeniorOverAllo, OtherAllo, TotalAllo, 
			CoeffJobAllo, CoeffSeniorAllo, CoeffSeniorOverAllo, CoeffOtherAllo, TotalCoeffAllo, 
			TotalCoeffIns, TotalSalIns, RealSalSI,
			SIRateE, SIRateC, UIRateE, UIRateC, HIRateE, HIRateC, T.KowType,
			ROW_NUMBER() OVER(PARTITION BY T.EmployeeID ORDER BY AdjDowCode desc) as RowID
		FROM dbo.HR_SocialInsAdjust AS T WITH (NOLOCK) INNER JOIN #employee_filters AS T1 ON T.EmployeeID = T1.EmployeeID
			 LEFT JOIN dbo.HR_LSKOW AS T2 WITH (NOLOCK) ON T.KowCode = T2.KowCode
		WHERE T.AdjDowCode <= @DowCode AND NumAdd NOT IN (27,28)
	) as R where RowID = 1 and NumAdd in (5,6)


	SELECT * INTO #tmpAdj FROM (
		SELECT T.EmployeeID, T.AdjDowCode, NumAdd,
			BasicSalContract, CoeffSalContract, RealSalContract, SalaryIns, 
			JobAllo, SeniorAllo, SeniorOverAllo, OtherAllo, TotalAllo, 
			CoeffJobAllo, CoeffSeniorAllo, CoeffSeniorOverAllo, CoeffOtherAllo, TotalCoeffAllo, 
			TotalCoeffIns, TotalSalIns, RealSalSI,
			SIRateE, SIRateC, UIRateE, UIRateC, HIRateE, HIRateC, T.KowType,
			ROW_NUMBER() OVER(PARTITION BY T.EmployeeID ORDER BY T.AdjDowCode desc) as RowID
		FROM HR_SocialInsAdjust AS T INNER JOIN (
			SELECT EmployeeID, AdjDowCode FROM #HR_SocialInsAdjust
		) AS T1 ON T.EmployeeID = T1.EmployeeID AND T.AdjDowCode > T1.AdjDowCode
		WHERE T.AdjDowCode <= @DowCode AND NumAdd IN (27,28)
	) AS ce where RowID = 1

	UPDATE T SET T.BasicSalContract = T1.BasicSalContract, T.CoeffSalContract = T1.CoeffSalContract, T.RealSalContract = T1.RealSalContract, 
		T.SalaryIns = T1.SalaryIns, T.JobAllo = T1.JobAllo, T.SeniorAllo = T1.SeniorAllo, T.SeniorOverAllo = T1.SeniorOverAllo, 
		T.OtherAllo = T1.OtherAllo, T.TotalAllo = T1.TotalAllo, T.CoeffJobAllo = T1.CoeffJobAllo, T.CoeffSeniorAllo = T1.CoeffSeniorAllo, 
		T.CoeffSeniorOverAllo = T1.CoeffSeniorOverAllo, T.CoeffOtherAllo = T1.CoeffOtherAllo, T.TotalCoeffAllo = T1.TotalCoeffAllo, 
		T.TotalCoeffIns = T1.TotalCoeffIns, T.TotalSalIns = T1.TotalSalIns, T.RealSalSI = T1.RealSalSI, 
		T.SIRateE = T1.SIRateE, T.SIRateC = T1.SIRateC, T.UIRateE = T1.UIRateE, T.UIRateC = T1.UIRateC, T.HIRateE = T1.HIRateE, T.HIRateC = T1.HIRateC,
		T.mNote = T.mNote + ' - DC'
	FROM #HR_SocialInsAdjust AS T INNER JOIN #tmpAdj AS T1 ON T.EmployeeID = T1.EmployeeID

	UPDATE T set T.SIRateE = 0, T.SIRateC = 0, T.UIRateE = 0, T.UIRateC = 0, T.HIRateE = 0, T.HIRateC = 0
	from #HR_SocialInsAdjust as T inner join (
		select EmployeeID
		from #HR_SocialInsAdjust where AdjDowCode < @DowCode and NumAdd = 6
	) as T1 on T.EmployeeID = T1.EmployeeID

	DECLARE @EmployeeID NVARCHAR(20), @mRowSIHK bit, @mRowSI bit, @JowName nvarchar(200), @ToMonth varchar(7), @TotalSalary_HK float, @TotalSalary float
	DECLARE @EmployeeRate float, @CompanyRate float, @UnERate float, @UnComRate float, @SIRate float, @SIRateCo float, @UnERate_HK float, 
		@UnComRate_HK float, @HIERate_HK float, @HIComRate_HK float, @HIERate float, @HIComRate float
	DECLARE @IsPaySeveranceAllo BIT, @mNote NVARCHAR(MAX), @NumAdd int

	
	DECLARE employee_cursor CURSOR FOR  
		SELECT T.EmployeeID, T.PositionName, 
		CASE WHEN T1.EmployeeID IS NOT NULL THEN (case when (NumAdd = 6 and KowType = 7) or (NumAdd = 5)
			then 1 else 0 end) ELSE 0 END, T1.mNote, T1.NumAdd
		FROM #employee_filters AS T LEFT JOIN #HR_SocialInsAdjust AS T1 ON T.EmployeeID = T1.EmployeeID
	OPEN employee_cursor
	WHILE 1 = 1  
	BEGIN
		FETCH NEXT FROM employee_cursor INTO @EmployeeID, @JowName, @IsPaySeveranceAllo, @mNote, @NumAdd
		IF @@FETCH_STATUS != 0
			BREAK;
		
		-- Kiểm tra nv có tồn tại quá trình đóng BHXH hay không	
		if exists(SELECT top(1) 1 FROM HR_EmpInsurance with (nolock) Where EmployeeID = @EmployeeID)
			set @mRowSIHK = 1
		else 
			set @mRowSIHK = 0

		-- Tháng đang xét có được trích BHXH hay không
		if exists(SELECT top(1) 1 FROM HR_SocialIns with (nolock) Where DowCode = @DowCode And EmployeeID = @EmployeeID)
			set @mRowSI = 1
		else
			set @mRowSI = 0

		-- Truong hop Bang HR_EmpInsurance rỗng
		IF @mRowSIHK = 0
		BEGIN
			-- Neu nv đã có trích nộp BHXH
			IF @mRowSI = 1
			begin			
				INSERT INTO HR_EmpInsurance(EmployeeID, FromMonth, ToMonth, SalaryContract, CompaSalContract, RealSalContract, SalaryIns, 
					JobAllo, SeniorAllo, AreaAllo, SeniorJobAllo, TotalAllo, CompaJobAllo, CompaSeniorAllo, CompaAreaAllo, CompaSeniorJobAllo, TotalCompaAllo, 
					TotalCompa, TotalSalary, RealSalaryIns, SIRate, SIRateCo, PositionName, UIRate, UIRateCo, HIRate, HIRateCo, 
					CreatedOn, CreatedBy, Note, IsPaySeveranceAllo)
				SELECT EmployeeID, @DowCode as FromMonth, @DowCode as ToMonth,
					BasicSalContract, CoeffSalContract, RealSalContract, TotalSalIns, 
					JobAllo, SeniorAllo, OtherAllo, SeniorOverAllo, TotalAllo,
					CoeffJobAllo, CoeffSeniorAllo, CoeffOtherAllo, CoeffSeniorOverAllo, isnull(TotalCoeffAllo,0),
					isnull(TotalCoeffIns,0), TotalSalIns, RealSalSI, SIRateE, SIRateC, @JowName, UIRateE, UIRateC, HIRateE, HIRateC, 
					GETDATE(), 'application', @mNote, @IsPaySeveranceAllo
				FROM HR_SocialIns with (nolock)  Where DowCode = @DowCode And EmployeeID = @EmployeeID
			end
		END
		ELSE -- Neu truong hop HR_EmpInsurance co du lieu
		BEGIN
			select @ToMonth = ToMonth, @TotalSalary_HK = SalaryIns, @SIRate = SIRate, @SIRateCo = SIRateCo, 
				@UnERate_HK = UIRate, @UnComRate_HK = UIRateCo, @HIERate_HK = HIRate, @HIComRate_HK = HIRateCo
			from (
				select EmployeeID, ToMonth, SalaryIns, SIRate, SIRateCo, UIRate, UIRateCo, HIRate, HIRateCo, 
					ROW_NUMBER() OVER(PARTITION BY EmployeeID ORDER BY EmployeeID, ToMonth desc) as Row_ID
				from HR_EmpInsurance with (nolock) where EmployeeID = @EmployeeID
			) as R where Row_ID = 1
		

			if @ToMonth > @DowCode
				continue;
			
			IF @mRowSI = 0 -- TH: nv đã có quá trình tham gia đóng BHXH, nhưng chưa trích nộp BHXH bao giờ (mới chuyển c.ty)
			begin
			
				If DATEDIFF(m, @ToMonth + '/01', @DowCode + '/01') > 1
				BEGIN
					-- data cũ
					INSERT INTO HR_EmpInsurance(EmployeeID, FromMonth, ToMonth, CreatedOn, CreatedBy, IsPaySeveranceAllo)
					VALUES(@EmployeeID, CONVERT(varchar(7), DATEADD(m, 1, @ToMonth + '/01'), 111), CONVERT(varchar(7), DATEADD(m, -1, @DowCode + '/01'), 111),
						GETDATE(), 'application', 0)
				END
                
				IF NOT EXISTS(SELECT TOP(1) 1 FROM #HR_SocialInsAdjust WHERE EmployeeID = @EmployeeID)
				begin
					INSERT INTO HR_EmpInsurance(EmployeeID, FromMonth, ToMonth, PositionName, CreatedOn, CreatedBy, Note, IsPaySeveranceAllo) 
					VALUES(@EmployeeID, @DowCode, @DowCode, @JowName, GETDATE(), 'application', @mNote, @IsPaySeveranceAllo)
				END
				ELSE
                BEGIN
					IF EXISTS(SELECT TOP(1) 1 FROM dbo.HR_EmpInsurance WITH (NOLOCK) WHERE EmployeeID = @EmployeeID AND FromMonth = @DowCode AND ToMonth = @DowCode)
					BEGIN 
						UPDATE T SET T.SalaryContract = T1.BasicSalContract, T.CompaSalContract = T1.CoeffSalContract, T.RealSalContract = T1.RealSalContract, 
							T.SalaryIns = T1.SalaryIns, T.JobAllo = T1.JobAllo, T.SeniorAllo = T1.SeniorAllo, T.AreaAllo = T1.OtherAllo, T.SeniorJobAllo = T1.SeniorOverAllo, 
							T.TotalAllo = T1.TotalAllo, T.CompaJobAllo = T1.CoeffJobAllo, T.CompaSeniorAllo = T1.CoeffSeniorAllo, T.CompaAreaAllo = T1.CoeffOtherAllo, 
							T.CompaSeniorJobAllo = T1.CoeffSeniorOverAllo, T.TotalCompaAllo = isnull(T1.TotalCoeffAllo,0), T.TotalCompa = isnull(T1.TotalCoeffIns,0), T.TotalSalary = T1.TotalSalIns, 
							T.RealSalaryIns = T1.RealSalSI, T.SIRate = T1.SIRateE, T.SIRateCo = T1.SIRateC, T.PositionName = @JowName, T.UIRate = T1.UIRateE, 
							T.UIRateCo = T1.UIRateC, T.HIRate = T1.HIRateE, T.HIRateCo = T1.HIRateC, T.ModifiedOn = GETDATE(), T.ModifiedBy = 'application', 
							T.Note = @mNote, T.IsPaySeveranceAllo = @IsPaySeveranceAllo
						FROM HR_EmpInsurance AS T INNER JOIN #HR_SocialInsAdjust AS T1 ON T.EmployeeID = T1.EmployeeID
							AND @DowCode BETWEEN T.FromMonth AND T.ToMonth
					END
					ELSE
					BEGIN 
						INSERT INTO HR_EmpInsurance(EmployeeID, FromMonth, ToMonth, SalaryContract, CompaSalContract, RealSalContract, SalaryIns, 
							JobAllo, SeniorAllo, AreaAllo, SeniorJobAllo, TotalAllo, CompaJobAllo, CompaSeniorAllo, CompaAreaAllo, CompaSeniorJobAllo, TotalCompaAllo, 
							TotalCompa, TotalSalary, RealSalaryIns, SIRate, SIRateCo, PositionName, UIRate, UIRateCo, HIRate, HIRateCo, 
							CreatedOn, CreatedBy, Note, IsPaySeveranceAllo)
						SELECT EmployeeID, @DowCode as FromMonth, @DowCode as ToMonth,
							BasicSalContract, CoeffSalContract, RealSalContract, TotalSalIns, 
							JobAllo, SeniorAllo, OtherAllo, SeniorOverAllo, TotalAllo,
							CoeffJobAllo, CoeffSeniorAllo, CoeffOtherAllo, CoeffSeniorOverAllo, isnull(TotalCoeffAllo,0),
							isnull(TotalCoeffIns,0), TotalSalIns, RealSalSI, SIRateE, SIRateC, @JowName, UIRateE, 
							UIRateC, HIRateE, HIRateC, 
							GETDATE(), 'application', @mNote, @IsPaySeveranceAllo
						FROM #HR_SocialInsAdjust with (nolock)  Where EmployeeID = @EmployeeID
					END
                end
			end
			ELSE
			BEGIN
				-- lấy tỉ lệ đóng BHXH
				SELECT @TotalSalary = TotalSalIns, @EmployeeRate = SIRateE, @CompanyRate = SIRateC, @UnERate = UIRateE, @UnComRate = UIRateC, 
					@HIERate = HIRateE, @HIComRate = HIRateC
				FROM HR_SocialIns with (nolock) Where DowCode = @DowCode And EmployeeID = @EmployeeID
				If DATEDIFF(m, @ToMonth + '/01', @DowCode + '/01') > 1
				begin
					INSERT INTO HR_EmpInsurance(EmployeeID, FromMonth, ToMonth, CreatedOn, CreatedBy, IsPaySeveranceAllo)
					VALUES(@EmployeeID, CONVERT(varchar(7), DATEADD(m, 1, @ToMonth + '/01'), 111), CONVERT(varchar(7), DATEADD(m, -1, @DowCode + '/01'), 111),
						GETDATE(), 'application', 0)

					INSERT INTO HR_EmpInsurance(EmployeeID, FromMonth, ToMonth, SalaryContract, CompaSalContract, RealSalContract, SalaryIns, 
						JobAllo, SeniorAllo, AreaAllo, SeniorJobAllo, TotalAllo, CompaJobAllo, CompaSeniorAllo, CompaAreaAllo, CompaSeniorJobAllo, TotalCompaAllo, 
						TotalCompa, TotalSalary, RealSalaryIns, SIRate, SIRateCo, PositionName, UIRate, UIRateCo, HIRate, HIRateCo, 
						CreatedOn, CreatedBy, Note, IsPaySeveranceAllo)
					SELECT EmployeeID, @DowCode as FromMonth, @DowCode as ToMonth,
						BasicSalContract, CoeffSalContract, RealSalContract, TotalSalIns, 
						JobAllo, SeniorAllo, OtherAllo, SeniorOverAllo, TotalAllo,
						CoeffJobAllo, CoeffSeniorAllo, CoeffOtherAllo, CoeffSeniorOverAllo, isnull(TotalCoeffAllo,0),
						isnull(TotalCoeffIns,0), TotalSalIns, RealSalSI, SIRateE, SIRateC, @JowName, UIRateE, UIRateC, HIRateE, HIRateC, 
						GETDATE(), 'application', @mNote, @IsPaySeveranceAllo
					FROM HR_SocialIns with (nolock)  Where DowCode = @DowCode And EmployeeID = @EmployeeID

					continue;
				end
				
				-- Neu 2 muc dong khac nhau --> insert dong moi
				IF @TotalSalary <> @TotalSalary_HK 
					or @EmployeeRate <> @SIRate or @CompanyRate <> @SIRateCo 
					or @UnERate <> @UnERate_HK or @UnComRate <> @UnComRate_HK
					or @HIERate <> @HIERate_HK or @HIERate <> @HIERate_HK
				begin
					If DATEDIFF(m, @ToMonth + '/01', @DowCode + '/01') > 1
					begin
						INSERT INTO HR_EmpInsurance(EmployeeID, FromMonth, ToMonth, CreatedOn, CreatedBy, IsPaySeveranceAllo)
						VALUES(@EmployeeID, CONVERT(varchar(7), DATEADD(m, 1, @ToMonth + '/01'), 111), CONVERT(varchar(7), DATEADD(m, -1, @DowCode + '/01'), 111),
							GETDATE(), 'application', 0)
					end
					INSERT INTO HR_EmpInsurance(EmployeeID, FromMonth, ToMonth, SalaryContract, CompaSalContract, RealSalContract, SalaryIns, 
						JobAllo, SeniorAllo, AreaAllo, SeniorJobAllo, TotalAllo, CompaJobAllo, CompaSeniorAllo, CompaAreaAllo, CompaSeniorJobAllo, TotalCompaAllo, 
						TotalCompa, TotalSalary, RealSalaryIns, SIRate, SIRateCo, PositionName, UIRate, UIRateCo, HIRate, HIRateCo, 
						CreatedOn, CreatedBy, Note, IsPaySeveranceAllo)
					SELECT EmployeeID, @DowCode as FromMonth, @DowCode as ToMonth,
						BasicSalContract, CoeffSalContract, RealSalContract, TotalSalIns, 
						JobAllo, SeniorAllo, OtherAllo, SeniorOverAllo, TotalAllo,
						CoeffJobAllo, CoeffSeniorAllo, CoeffOtherAllo, CoeffSeniorOverAllo, isnull(TotalCoeffAllo,0),
						isnull(TotalCoeffIns,0), TotalSalIns, RealSalSI, SIRateE, SIRateC, @JowName, UIRateE, UIRateC, HIRateE, HIRateC, 
						GETDATE(), 'application', @mNote, @IsPaySeveranceAllo
					FROM HR_SocialIns with (nolock)  Where DowCode = @DowCode And EmployeeID = @EmployeeID
				end
				-- Neu 2 muc dong bang nhau ---> cap nhat thang
				ELSE
				begin
					UPDATE HR_EmpInsurance SET ToMonth = @DowCode, ModifiedOn = GETDATE(), ModifiedBy = 'application', Note = @mNote, IsPaySeveranceAllo = @IsPaySeveranceAllo
					FROM HR_EmpInsurance as SIHK INNER JOIN (
						select top(1) EmployeeID, ToMonth from HR_EmpInsurance Where EmployeeID = @EmployeeID Order by ToMonth desc
					) as other_table ON SIHK.EmployeeID = other_table.EmployeeID And SIHK.ToMonth = other_table.ToMonth
				end
			END
		END

	END  
	CLOSE employee_cursor  
	DEALLOCATE employee_cursor

	RETURN

